
IMU_Headtracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004a6  0000053a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800104  00800104  0000053e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be7  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000917  00000000  00000000  00001237  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000797  00000000  00000000  00001b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  000022e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000588  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064e  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000030c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_18>
  4c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_19>
  50:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_20>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_24>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	d6 00       	.word	0x00d6	; ????
  6a:	28 01       	movw	r4, r16
  6c:	28 01       	movw	r4, r16
  6e:	28 01       	movw	r4, r16
  70:	28 01       	movw	r4, r16
  72:	28 01       	movw	r4, r16
  74:	28 01       	movw	r4, r16
  76:	28 01       	movw	r4, r16
  78:	d6 00       	.word	0x00d6	; ????
  7a:	28 01       	movw	r4, r16
  7c:	28 01       	movw	r4, r16
  7e:	28 01       	movw	r4, r16
  80:	28 01       	movw	r4, r16
  82:	28 01       	movw	r4, r16
  84:	28 01       	movw	r4, r16
  86:	28 01       	movw	r4, r16
  88:	d8 00       	.word	0x00d8	; ????
  8a:	28 01       	movw	r4, r16
  8c:	28 01       	movw	r4, r16
  8e:	28 01       	movw	r4, r16
  90:	28 01       	movw	r4, r16
  92:	28 01       	movw	r4, r16
  94:	28 01       	movw	r4, r16
  96:	28 01       	movw	r4, r16
  98:	28 01       	movw	r4, r16
  9a:	28 01       	movw	r4, r16
  9c:	28 01       	movw	r4, r16
  9e:	28 01       	movw	r4, r16
  a0:	28 01       	movw	r4, r16
  a2:	28 01       	movw	r4, r16
  a4:	28 01       	movw	r4, r16
  a6:	28 01       	movw	r4, r16
  a8:	d8 00       	.word	0x00d8	; ????
  aa:	28 01       	movw	r4, r16
  ac:	28 01       	movw	r4, r16
  ae:	28 01       	movw	r4, r16
  b0:	28 01       	movw	r4, r16
  b2:	28 01       	movw	r4, r16
  b4:	28 01       	movw	r4, r16
  b6:	28 01       	movw	r4, r16
  b8:	28 01       	movw	r4, r16
  ba:	28 01       	movw	r4, r16
  bc:	28 01       	movw	r4, r16
  be:	28 01       	movw	r4, r16
  c0:	28 01       	movw	r4, r16
  c2:	28 01       	movw	r4, r16
  c4:	28 01       	movw	r4, r16
  c6:	28 01       	movw	r4, r16
  c8:	24 01       	movw	r4, r8
  ca:	28 01       	movw	r4, r16
  cc:	28 01       	movw	r4, r16
  ce:	28 01       	movw	r4, r16
  d0:	28 01       	movw	r4, r16
  d2:	28 01       	movw	r4, r16
  d4:	28 01       	movw	r4, r16
  d6:	28 01       	movw	r4, r16
  d8:	01 01       	movw	r0, r2
  da:	28 01       	movw	r4, r16
  dc:	28 01       	movw	r4, r16
  de:	28 01       	movw	r4, r16
  e0:	28 01       	movw	r4, r16
  e2:	28 01       	movw	r4, r16
  e4:	28 01       	movw	r4, r16
  e6:	28 01       	movw	r4, r16
  e8:	28 01       	movw	r4, r16
  ea:	28 01       	movw	r4, r16
  ec:	28 01       	movw	r4, r16
  ee:	28 01       	movw	r4, r16
  f0:	28 01       	movw	r4, r16
  f2:	28 01       	movw	r4, r16
  f4:	28 01       	movw	r4, r16
  f6:	28 01       	movw	r4, r16
  f8:	f5 00       	.word	0x00f5	; ????
  fa:	28 01       	movw	r4, r16
  fc:	28 01       	movw	r4, r16
  fe:	28 01       	movw	r4, r16
 100:	28 01       	movw	r4, r16
 102:	28 01       	movw	r4, r16
 104:	28 01       	movw	r4, r16
 106:	28 01       	movw	r4, r16
 108:	13 01       	movw	r2, r6

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d8 e0       	ldi	r29, 0x08	; 8
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	e6 ea       	ldi	r30, 0xA6	; 166
 11e:	f4 e0       	ldi	r31, 0x04	; 4
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	a4 30       	cpi	r26, 0x04	; 4
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	a4 e0       	ldi	r26, 0x04	; 4
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	ac 31       	cpi	r26, 0x1C	; 28
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	0e 94 a4 00 	call	0x148	; 0x148 <main>
 140:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <main>:
 148:	0e 94 b1 00 	call	0x162	; 0x162 <TWI_Master_Initialise>
 14c:	78 94       	sei
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	84 e3       	ldi	r24, 0x34	; 52
 152:	9c e0       	ldi	r25, 0x0C	; 12
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0xc>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x16>
 15e:	00 00       	nop
 160:	ff cf       	rjmp	.-2      	; 0x160 <main+0x18>

00000162 <TWI_Master_Initialise>:
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
}
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 174:	08 95       	ret

00000176 <__vector_24>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 190:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 194:	8e 2f       	mov	r24, r30
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	fc 01       	movw	r30, r24
 19a:	38 97       	sbiw	r30, 0x08	; 8
 19c:	e1 35       	cpi	r30, 0x51	; 81
 19e:	f1 05       	cpc	r31, r1
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <__vector_24+0x2e>
 1a2:	56 c0       	rjmp	.+172    	; 0x250 <__vector_24+0xda>
 1a4:	ec 5c       	subi	r30, 0xCC	; 204
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 1ac:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 1b0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 1b4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <TWI_msgSize>
 1b8:	e8 17       	cp	r30, r24
 1ba:	70 f4       	brcc	.+28     	; 0x1d8 <__vector_24+0x62>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	8e 0f       	add	r24, r30
 1c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	e9 5f       	subi	r30, 0xF9	; 249
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	80 81       	ld	r24, Z
 1cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1d0:	85 e8       	ldi	r24, 0x85	; 133
 1d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1d6:	43 c0       	rjmp	.+134    	; 0x25e <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 1d8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <TWI_statusReg>
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1e2:	84 e9       	ldi	r24, 0x94	; 148
 1e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1e8:	3a c0       	rjmp	.+116    	; 0x25e <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 1ea:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	8e 0f       	add	r24, r30
 1f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	e9 5f       	subi	r30, 0xF9	; 249
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 202:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <TWI_msgSize>
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	28 17       	cp	r18, r24
 212:	39 07       	cpc	r19, r25
 214:	24 f4       	brge	.+8      	; 0x21e <__vector_24+0xa8>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 216:	85 ec       	ldi	r24, 0xC5	; 197
 218:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 21c:	20 c0       	rjmp	.+64     	; 0x25e <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 21e:	85 e8       	ldi	r24, 0x85	; 133
 220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 224:	1c c0       	rjmp	.+56     	; 0x25e <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 226:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 22a:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	e9 5f       	subi	r30, 0xF9	; 249
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 236:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <TWI_statusReg>
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 240:	84 e9       	ldi	r24, 0x94	; 148
 242:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 246:	0b c0       	rjmp	.+22     	; 0x25e <__vector_24+0xe8>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 248:	85 ea       	ldi	r24, 0xA5	; 165
 24a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 24e:	07 c0       	rjmp	.+14     	; 0x25e <__vector_24+0xe8>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 250:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 254:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	bf 91       	pop	r27
 264:	af 91       	pop	r26
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__vector_18>:
		return 0;
	}
	return 0;	
}

ISR(USART_RX_vect){
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
	rx_buffer[rx_cnt] = UDR0;
 29e:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <rx_buffer>
 2a2:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <rx_buffer+0x1>
 2a6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rx_cnt>
 2aa:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rx_cnt+0x1>
 2ae:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <rx_cnt+0x2>
 2b2:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <rx_cnt+0x3>
 2b6:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2ba:	fe 01       	movw	r30, r28
 2bc:	e8 0f       	add	r30, r24
 2be:	f9 1f       	adc	r31, r25
 2c0:	20 83       	st	Z, r18
	if(rx_cnt > 0)
 2c2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rx_cnt>
 2c6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rx_cnt+0x1>
 2ca:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <rx_cnt+0x2>
 2ce:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <rx_cnt+0x3>
 2d2:	89 2b       	or	r24, r25
 2d4:	8a 2b       	or	r24, r26
 2d6:	8b 2b       	or	r24, r27
 2d8:	61 f1       	breq	.+88     	; 0x332 <__vector_18+0xba>
		if(memcmp(&rx_buffer[rx_cnt-1], rx_terminator, 2)){
 2da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rx_cnt>
 2de:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rx_cnt+0x1>
 2e2:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <rx_cnt+0x2>
 2e6:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <rx_cnt+0x3>
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	42 e0       	ldi	r20, 0x02	; 2
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	71 e0       	ldi	r23, 0x01	; 1
 2f4:	8c 0f       	add	r24, r28
 2f6:	9d 1f       	adc	r25, r29
 2f8:	0e 94 44 02 	call	0x488	; 0x488 <memcmp>
 2fc:	89 2b       	or	r24, r25
 2fe:	c9 f0       	breq	.+50     	; 0x332 <__vector_18+0xba>
			// In this case, we just append \0 and disable the UART reception, then set correct state
			rx_buffer[rx_cnt + 1] = '\0';
 300:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rx_cnt>
 304:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rx_cnt+0x1>
 308:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <rx_cnt+0x2>
 30c:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <rx_cnt+0x3>
 310:	c8 0f       	add	r28, r24
 312:	d9 1f       	adc	r29, r25
 314:	19 82       	std	Y+1, r1	; 0x01
			if(state == tx_rx)
 316:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <state>
 31a:	83 30       	cpi	r24, 0x03	; 3
 31c:	21 f4       	brne	.+8      	; 0x326 <__vector_18+0xae>
				state = tx;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <state>
 324:	02 c0       	rjmp	.+4      	; 0x32a <__vector_18+0xb2>
			else
				state = waiting;
 326:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <state>
			UART_rx_disable();
 32a:	e1 ec       	ldi	r30, 0xC1	; 193
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	10 82       	st	Z, r1
		}
	++rx_cnt;
 332:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rx_cnt>
 336:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rx_cnt+0x1>
 33a:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <rx_cnt+0x2>
 33e:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <rx_cnt+0x3>
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	a1 1d       	adc	r26, r1
 346:	b1 1d       	adc	r27, r1
 348:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <rx_cnt>
 34c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <rx_cnt+0x1>
 350:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <rx_cnt+0x2>
 354:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <rx_cnt+0x3>
}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <__vector_19>:

ISR(USART_UDRE_vect){
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	2f 93       	push	r18
 38a:	3f 93       	push	r19
 38c:	4f 93       	push	r20
 38e:	5f 93       	push	r21
 390:	6f 93       	push	r22
 392:	7f 93       	push	r23
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	af 93       	push	r26
 39a:	bf 93       	push	r27
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
	++tx_cnt;// increment txCnt (since the byte has been loaded in transmitter
 3a0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tx_cnt>
 3a4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <tx_cnt+0x1>
 3a8:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <tx_cnt+0x2>
 3ac:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <tx_cnt+0x3>
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	a1 1d       	adc	r26, r1
 3b4:	b1 1d       	adc	r27, r1
 3b6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tx_cnt>
 3ba:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <tx_cnt+0x1>
 3be:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <tx_cnt+0x2>
 3c2:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <tx_cnt+0x3>
	if(tx_cnt < tx_length){
 3c6:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <tx_cnt>
 3ca:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <tx_cnt+0x1>
 3ce:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <tx_cnt+0x2>
 3d2:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <tx_cnt+0x3>
 3d6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_length>
 3da:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <tx_length+0x1>
 3de:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <tx_length+0x2>
 3e2:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <tx_length+0x3>
 3e6:	48 17       	cp	r20, r24
 3e8:	59 07       	cpc	r21, r25
 3ea:	6a 07       	cpc	r22, r26
 3ec:	7b 07       	cpc	r23, r27
 3ee:	98 f4       	brcc	.+38     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		UDR0 = tx_buffer[tx_cnt];
 3f0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tx_cnt>
 3f4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <tx_cnt+0x1>
 3f8:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <tx_cnt+0x2>
 3fc:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <tx_cnt+0x3>
 400:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <tx_buffer>
 404:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <tx_buffer+0x1>
 408:	f9 01       	movw	r30, r18
 40a:	e8 0f       	add	r30, r24
 40c:	f9 1f       	adc	r31, r25
 40e:	80 81       	ld	r24, Z
 410:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 414:	04 c0       	rjmp	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		//this clears the interrupt flag automatically.
	}
	else{
		//disable UDRE interrupt
		UCSR0B &= !(1<<UDRIE0);
 416:	e1 ec       	ldi	r30, 0xC1	; 193
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	10 82       	st	Z, r1
		//once last byte has left, TX_vect should trigger, updating the transmit state
	}
}
 41e:	ff 91       	pop	r31
 420:	ef 91       	pop	r30
 422:	bf 91       	pop	r27
 424:	af 91       	pop	r26
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	7f 91       	pop	r23
 42c:	6f 91       	pop	r22
 42e:	5f 91       	pop	r21
 430:	4f 91       	pop	r20
 432:	3f 91       	pop	r19
 434:	2f 91       	pop	r18
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <__vector_20>:

ISR(USART_TX_vect){
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	8f 93       	push	r24
 44c:	ef 93       	push	r30
 44e:	ff 93       	push	r31
	// set state to only rx of coming from tx_rx
	// alternatively, when coming from tx, go back to waiting.
	if(state == tx_rx)
 450:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <state>
 454:	83 30       	cpi	r24, 0x03	; 3
 456:	21 f4       	brne	.+8      	; 0x460 <__vector_20+0x20>
		state = rx;
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <state>
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__vector_20+0x24>
	else
		state = waiting;
 460:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <state>
	UART_tx_disable();
 464:	e1 ec       	ldi	r30, 0xC1	; 193
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	10 82       	st	Z, r1
}
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	8f 91       	pop	r24
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <__tablejump2__>:
 47c:	ee 0f       	add	r30, r30
 47e:	ff 1f       	adc	r31, r31
 480:	05 90       	lpm	r0, Z+
 482:	f4 91       	lpm	r31, Z
 484:	e0 2d       	mov	r30, r0
 486:	09 94       	ijmp

00000488 <memcmp>:
 488:	fb 01       	movw	r30, r22
 48a:	dc 01       	movw	r26, r24
 48c:	04 c0       	rjmp	.+8      	; 0x496 <memcmp+0xe>
 48e:	8d 91       	ld	r24, X+
 490:	01 90       	ld	r0, Z+
 492:	80 19       	sub	r24, r0
 494:	21 f4       	brne	.+8      	; 0x49e <memcmp+0x16>
 496:	41 50       	subi	r20, 0x01	; 1
 498:	50 40       	sbci	r21, 0x00	; 0
 49a:	c8 f7       	brcc	.-14     	; 0x48e <memcmp+0x6>
 49c:	88 1b       	sub	r24, r24
 49e:	99 0b       	sbc	r25, r25
 4a0:	08 95       	ret

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
