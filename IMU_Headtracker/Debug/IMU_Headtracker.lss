
IMU_Headtracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  0000033e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000873  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000740  00000000  00000000  00000c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ee  00000000  00000000  000013b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000017a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019b  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_24>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	e6 00       	.word	0x00e6	; ????
  6a:	38 01       	movw	r6, r16
  6c:	38 01       	movw	r6, r16
  6e:	38 01       	movw	r6, r16
  70:	38 01       	movw	r6, r16
  72:	38 01       	movw	r6, r16
  74:	38 01       	movw	r6, r16
  76:	38 01       	movw	r6, r16
  78:	e6 00       	.word	0x00e6	; ????
  7a:	38 01       	movw	r6, r16
  7c:	38 01       	movw	r6, r16
  7e:	38 01       	movw	r6, r16
  80:	38 01       	movw	r6, r16
  82:	38 01       	movw	r6, r16
  84:	38 01       	movw	r6, r16
  86:	38 01       	movw	r6, r16
  88:	e8 00       	.word	0x00e8	; ????
  8a:	38 01       	movw	r6, r16
  8c:	38 01       	movw	r6, r16
  8e:	38 01       	movw	r6, r16
  90:	38 01       	movw	r6, r16
  92:	38 01       	movw	r6, r16
  94:	38 01       	movw	r6, r16
  96:	38 01       	movw	r6, r16
  98:	38 01       	movw	r6, r16
  9a:	38 01       	movw	r6, r16
  9c:	38 01       	movw	r6, r16
  9e:	38 01       	movw	r6, r16
  a0:	38 01       	movw	r6, r16
  a2:	38 01       	movw	r6, r16
  a4:	38 01       	movw	r6, r16
  a6:	38 01       	movw	r6, r16
  a8:	e8 00       	.word	0x00e8	; ????
  aa:	38 01       	movw	r6, r16
  ac:	38 01       	movw	r6, r16
  ae:	38 01       	movw	r6, r16
  b0:	38 01       	movw	r6, r16
  b2:	38 01       	movw	r6, r16
  b4:	38 01       	movw	r6, r16
  b6:	38 01       	movw	r6, r16
  b8:	38 01       	movw	r6, r16
  ba:	38 01       	movw	r6, r16
  bc:	38 01       	movw	r6, r16
  be:	38 01       	movw	r6, r16
  c0:	38 01       	movw	r6, r16
  c2:	38 01       	movw	r6, r16
  c4:	38 01       	movw	r6, r16
  c6:	38 01       	movw	r6, r16
  c8:	34 01       	movw	r6, r8
  ca:	38 01       	movw	r6, r16
  cc:	38 01       	movw	r6, r16
  ce:	38 01       	movw	r6, r16
  d0:	38 01       	movw	r6, r16
  d2:	38 01       	movw	r6, r16
  d4:	38 01       	movw	r6, r16
  d6:	38 01       	movw	r6, r16
  d8:	11 01       	movw	r2, r2
  da:	38 01       	movw	r6, r16
  dc:	38 01       	movw	r6, r16
  de:	38 01       	movw	r6, r16
  e0:	38 01       	movw	r6, r16
  e2:	38 01       	movw	r6, r16
  e4:	38 01       	movw	r6, r16
  e6:	38 01       	movw	r6, r16
  e8:	38 01       	movw	r6, r16
  ea:	38 01       	movw	r6, r16
  ec:	38 01       	movw	r6, r16
  ee:	38 01       	movw	r6, r16
  f0:	38 01       	movw	r6, r16
  f2:	38 01       	movw	r6, r16
  f4:	38 01       	movw	r6, r16
  f6:	38 01       	movw	r6, r16
  f8:	05 01       	movw	r0, r10
  fa:	38 01       	movw	r6, r16
  fc:	38 01       	movw	r6, r16
  fe:	38 01       	movw	r6, r16
 100:	38 01       	movw	r6, r16
 102:	38 01       	movw	r6, r16
 104:	38 01       	movw	r6, r16
 106:	38 01       	movw	r6, r16
 108:	23 01       	movw	r4, r6

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d8 e0       	ldi	r29, 0x08	; 8
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	e8 ea       	ldi	r30, 0xA8	; 168
 11e:	f2 e0       	ldi	r31, 0x02	; 2
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	a2 30       	cpi	r26, 0x02	; 2
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	a2 e0       	ldi	r26, 0x02	; 2
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	a9 30       	cpi	r26, 0x09	; 9
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	0e 94 a4 00 	call	0x148	; 0x148 <main>
 140:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <main>:
 148:	0e 94 c1 00 	call	0x182	; 0x182 <TWI_Master_Initialise>
 14c:	e1 ec       	ldi	r30, 0xC1	; 193
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 ec       	ldi	r24, 0xC0	; 192
 152:	80 83       	st	Z, r24
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 162:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 166:	80 81       	ld	r24, Z
 168:	88 61       	ori	r24, 0x18	; 24
 16a:	80 83       	st	Z, r24
 16c:	78 94       	sei
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	84 e3       	ldi	r24, 0x34	; 52
 172:	9c e0       	ldi	r25, 0x0C	; 12
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x2c>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x36>
 17e:	00 00       	nop
 180:	ff cf       	rjmp	.-2      	; 0x180 <main+0x38>

00000182 <TWI_Master_Initialise>:
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
}
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 194:	08 95       	ret

00000196 <__vector_24>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 1b0:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1b4:	8e 2f       	mov	r24, r30
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	fc 01       	movw	r30, r24
 1ba:	38 97       	sbiw	r30, 0x08	; 8
 1bc:	e1 35       	cpi	r30, 0x51	; 81
 1be:	f1 05       	cpc	r31, r1
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <__vector_24+0x2e>
 1c2:	56 c0       	rjmp	.+172    	; 0x270 <__vector_24+0xda>
 1c4:	ec 5c       	subi	r30, 0xCC	; 204
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	0c 94 4c 01 	jmp	0x298	; 0x298 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 1cc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 1d0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 1d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_msgSize>
 1d8:	e8 17       	cp	r30, r24
 1da:	70 f4       	brcc	.+28     	; 0x1f8 <__vector_24+0x62>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	8e 0f       	add	r24, r30
 1e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	eb 5f       	subi	r30, 0xFB	; 251
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	80 81       	ld	r24, Z
 1ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1f0:	85 e8       	ldi	r24, 0x85	; 133
 1f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1f6:	43 c0       	rjmp	.+134    	; 0x27e <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 1f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 202:	84 e9       	ldi	r24, 0x94	; 148
 204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 208:	3a c0       	rjmp	.+116    	; 0x27e <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 20a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	8e 0f       	add	r24, r30
 212:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 216:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	eb 5f       	subi	r30, 0xFB	; 251
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 222:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_msgSize>
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	28 17       	cp	r18, r24
 232:	39 07       	cpc	r19, r25
 234:	24 f4       	brge	.+8      	; 0x23e <__vector_24+0xa8>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 236:	85 ec       	ldi	r24, 0xC5	; 197
 238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 23c:	20 c0       	rjmp	.+64     	; 0x27e <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 23e:	85 e8       	ldi	r24, 0x85	; 133
 240:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 244:	1c c0       	rjmp	.+56     	; 0x27e <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 246:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 24a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	eb 5f       	subi	r30, 0xFB	; 251
 252:	fe 4f       	sbci	r31, 0xFE	; 254
 254:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 256:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 25a:	81 60       	ori	r24, 0x01	; 1
 25c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 260:	84 e9       	ldi	r24, 0x94	; 148
 262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 266:	0b c0       	rjmp	.+22     	; 0x27e <__vector_24+0xe8>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 268:	85 ea       	ldi	r24, 0xA5	; 165
 26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 26e:	07 c0       	rjmp	.+14     	; 0x27e <__vector_24+0xe8>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 270:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 274:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 278:	84 e0       	ldi	r24, 0x04	; 4
 27a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__tablejump2__>:
 298:	ee 0f       	add	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	05 90       	lpm	r0, Z+
 29e:	f4 91       	lpm	r31, Z
 2a0:	e0 2d       	mov	r30, r0
 2a2:	09 94       	ijmp

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
