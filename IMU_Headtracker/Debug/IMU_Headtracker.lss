
IMU_Headtracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004c4  00000558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800104  00800104  0000055c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be9  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000908  00000000  00000000  00001255  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b3  00000000  00000000  00001b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000588  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c8  00000000  00000000  00002aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_18>
  4c:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_19>
  50:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_20>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_24>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	d8 00       	.word	0x00d8	; ????
  6a:	2a 01       	movw	r4, r20
  6c:	2a 01       	movw	r4, r20
  6e:	2a 01       	movw	r4, r20
  70:	2a 01       	movw	r4, r20
  72:	2a 01       	movw	r4, r20
  74:	2a 01       	movw	r4, r20
  76:	2a 01       	movw	r4, r20
  78:	d8 00       	.word	0x00d8	; ????
  7a:	2a 01       	movw	r4, r20
  7c:	2a 01       	movw	r4, r20
  7e:	2a 01       	movw	r4, r20
  80:	2a 01       	movw	r4, r20
  82:	2a 01       	movw	r4, r20
  84:	2a 01       	movw	r4, r20
  86:	2a 01       	movw	r4, r20
  88:	da 00       	.word	0x00da	; ????
  8a:	2a 01       	movw	r4, r20
  8c:	2a 01       	movw	r4, r20
  8e:	2a 01       	movw	r4, r20
  90:	2a 01       	movw	r4, r20
  92:	2a 01       	movw	r4, r20
  94:	2a 01       	movw	r4, r20
  96:	2a 01       	movw	r4, r20
  98:	2a 01       	movw	r4, r20
  9a:	2a 01       	movw	r4, r20
  9c:	2a 01       	movw	r4, r20
  9e:	2a 01       	movw	r4, r20
  a0:	2a 01       	movw	r4, r20
  a2:	2a 01       	movw	r4, r20
  a4:	2a 01       	movw	r4, r20
  a6:	2a 01       	movw	r4, r20
  a8:	da 00       	.word	0x00da	; ????
  aa:	2a 01       	movw	r4, r20
  ac:	2a 01       	movw	r4, r20
  ae:	2a 01       	movw	r4, r20
  b0:	2a 01       	movw	r4, r20
  b2:	2a 01       	movw	r4, r20
  b4:	2a 01       	movw	r4, r20
  b6:	2a 01       	movw	r4, r20
  b8:	2a 01       	movw	r4, r20
  ba:	2a 01       	movw	r4, r20
  bc:	2a 01       	movw	r4, r20
  be:	2a 01       	movw	r4, r20
  c0:	2a 01       	movw	r4, r20
  c2:	2a 01       	movw	r4, r20
  c4:	2a 01       	movw	r4, r20
  c6:	2a 01       	movw	r4, r20
  c8:	26 01       	movw	r4, r12
  ca:	2a 01       	movw	r4, r20
  cc:	2a 01       	movw	r4, r20
  ce:	2a 01       	movw	r4, r20
  d0:	2a 01       	movw	r4, r20
  d2:	2a 01       	movw	r4, r20
  d4:	2a 01       	movw	r4, r20
  d6:	2a 01       	movw	r4, r20
  d8:	03 01       	movw	r0, r6
  da:	2a 01       	movw	r4, r20
  dc:	2a 01       	movw	r4, r20
  de:	2a 01       	movw	r4, r20
  e0:	2a 01       	movw	r4, r20
  e2:	2a 01       	movw	r4, r20
  e4:	2a 01       	movw	r4, r20
  e6:	2a 01       	movw	r4, r20
  e8:	2a 01       	movw	r4, r20
  ea:	2a 01       	movw	r4, r20
  ec:	2a 01       	movw	r4, r20
  ee:	2a 01       	movw	r4, r20
  f0:	2a 01       	movw	r4, r20
  f2:	2a 01       	movw	r4, r20
  f4:	2a 01       	movw	r4, r20
  f6:	2a 01       	movw	r4, r20
  f8:	f7 00       	.word	0x00f7	; ????
  fa:	2a 01       	movw	r4, r20
  fc:	2a 01       	movw	r4, r20
  fe:	2a 01       	movw	r4, r20
 100:	2a 01       	movw	r4, r20
 102:	2a 01       	movw	r4, r20
 104:	2a 01       	movw	r4, r20
 106:	2a 01       	movw	r4, r20
 108:	15 01       	movw	r2, r10

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d8 e0       	ldi	r29, 0x08	; 8
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	e4 ec       	ldi	r30, 0xC4	; 196
 11e:	f4 e0       	ldi	r31, 0x04	; 4
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	a4 30       	cpi	r26, 0x04	; 4
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	a4 e0       	ldi	r26, 0x04	; 4
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	a0 32       	cpi	r26, 0x20	; 32
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	0e 94 a4 00 	call	0x148	; 0x148 <main>
 140:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <main>:
 148:	0e 94 b3 00 	call	0x166	; 0x166 <TWI_Master_Initialise>
 14c:	0e 94 3e 01 	call	0x27c	; 0x27c <UART_initialise>
 150:	78 94       	sei
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	84 e3       	ldi	r24, 0x34	; 52
 156:	9c e0       	ldi	r25, 0x0C	; 12
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x10>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x1a>
 162:	00 00       	nop
 164:	ff cf       	rjmp	.-2      	; 0x164 <main+0x1c>

00000166 <TWI_Master_Initialise>:
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
}
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 178:	08 95       	ret

0000017a <__vector_24>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 194:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 198:	8e 2f       	mov	r24, r30
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	fc 01       	movw	r30, r24
 19e:	38 97       	sbiw	r30, 0x08	; 8
 1a0:	e1 35       	cpi	r30, 0x51	; 81
 1a2:	f1 05       	cpc	r31, r1
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <__vector_24+0x2e>
 1a6:	56 c0       	rjmp	.+172    	; 0x254 <__vector_24+0xda>
 1a8:	ec 5c       	subi	r30, 0xCC	; 204
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 1b0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 1b4:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 1b8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <TWI_msgSize>
 1bc:	e8 17       	cp	r30, r24
 1be:	70 f4       	brcc	.+28     	; 0x1dc <__vector_24+0x62>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	8e 0f       	add	r24, r30
 1c4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	e9 5f       	subi	r30, 0xF9	; 249
 1cc:	fe 4f       	sbci	r31, 0xFE	; 254
 1ce:	80 81       	ld	r24, Z
 1d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1d4:	85 e8       	ldi	r24, 0x85	; 133
 1d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1da:	43 c0       	rjmp	.+134    	; 0x262 <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 1dc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <TWI_statusReg>
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1e6:	84 e9       	ldi	r24, 0x94	; 148
 1e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1ec:	3a c0       	rjmp	.+116    	; 0x262 <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 1ee:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	8e 0f       	add	r24, r30
 1f6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1fa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	e9 5f       	subi	r30, 0xF9	; 249
 202:	fe 4f       	sbci	r31, 0xFE	; 254
 204:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 206:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <TWI_msgSize>
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	28 17       	cp	r18, r24
 216:	39 07       	cpc	r19, r25
 218:	24 f4       	brge	.+8      	; 0x222 <__vector_24+0xa8>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 21a:	85 ec       	ldi	r24, 0xC5	; 197
 21c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 220:	20 c0       	rjmp	.+64     	; 0x262 <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 222:	85 e8       	ldi	r24, 0x85	; 133
 224:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 228:	1c c0       	rjmp	.+56     	; 0x262 <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 22a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 22e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	e9 5f       	subi	r30, 0xF9	; 249
 236:	fe 4f       	sbci	r31, 0xFE	; 254
 238:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 23a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <TWI_statusReg>
 23e:	81 60       	ori	r24, 0x01	; 1
 240:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 244:	84 e9       	ldi	r24, 0x94	; 148
 246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 24a:	0b c0       	rjmp	.+22     	; 0x262 <__vector_24+0xe8>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 24c:	85 ea       	ldi	r24, 0xA5	; 165
 24e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 252:	07 c0       	rjmp	.+14     	; 0x262 <__vector_24+0xe8>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 254:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 258:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <UART_initialise>:
			return 1;
		}
		return 0;
	}
	return 0;	
}
 27c:	80 ec       	ldi	r24, 0xC0	; 192
 27e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 288:	8c e0       	ldi	r24, 0x0C	; 12
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 290:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 294:	08 95       	ret

00000296 <__vector_18>:

ISR(USART_RX_vect){
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	5f 93       	push	r21
 2a8:	6f 93       	push	r22
 2aa:	7f 93       	push	r23
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
	rx_buffer[rx_cnt] = UDR0;
 2bc:	c0 91 18 01 	lds	r28, 0x0118	; 0x800118 <rx_buffer>
 2c0:	d0 91 19 01 	lds	r29, 0x0119	; 0x800119 <rx_buffer+0x1>
 2c4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_cnt>
 2c8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <rx_cnt+0x1>
 2cc:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <rx_cnt+0x2>
 2d0:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <rx_cnt+0x3>
 2d4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2d8:	fe 01       	movw	r30, r28
 2da:	e8 0f       	add	r30, r24
 2dc:	f9 1f       	adc	r31, r25
 2de:	20 83       	st	Z, r18
	if(rx_cnt > 0)
 2e0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_cnt>
 2e4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <rx_cnt+0x1>
 2e8:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <rx_cnt+0x2>
 2ec:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <rx_cnt+0x3>
 2f0:	89 2b       	or	r24, r25
 2f2:	8a 2b       	or	r24, r26
 2f4:	8b 2b       	or	r24, r27
 2f6:	61 f1       	breq	.+88     	; 0x350 <__vector_18+0xba>
		if(memcmp(&rx_buffer[rx_cnt-1], rx_terminator, 2)){
 2f8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_cnt>
 2fc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <rx_cnt+0x1>
 300:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <rx_cnt+0x2>
 304:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <rx_cnt+0x3>
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	42 e0       	ldi	r20, 0x02	; 2
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	71 e0       	ldi	r23, 0x01	; 1
 312:	8c 0f       	add	r24, r28
 314:	9d 1f       	adc	r25, r29
 316:	0e 94 53 02 	call	0x4a6	; 0x4a6 <memcmp>
 31a:	89 2b       	or	r24, r25
 31c:	c9 f0       	breq	.+50     	; 0x350 <__vector_18+0xba>
			// In this case, we just append \0 and disable the UART reception, then set correct state
			rx_buffer[rx_cnt + 1] = '\0';
 31e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_cnt>
 322:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <rx_cnt+0x1>
 326:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <rx_cnt+0x2>
 32a:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <rx_cnt+0x3>
 32e:	c8 0f       	add	r28, r24
 330:	d9 1f       	adc	r29, r25
 332:	19 82       	std	Y+1, r1	; 0x01
			if(state == tx_rx)
 334:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <state>
 338:	83 30       	cpi	r24, 0x03	; 3
 33a:	21 f4       	brne	.+8      	; 0x344 <__vector_18+0xae>
				state = tx;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
 342:	02 c0       	rjmp	.+4      	; 0x348 <__vector_18+0xb2>
			else
				state = waiting;
 344:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <state>
			UART_rx_disable();
 348:	e1 ec       	ldi	r30, 0xC1	; 193
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	10 82       	st	Z, r1
		}
	++rx_cnt;
 350:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_cnt>
 354:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <rx_cnt+0x1>
 358:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <rx_cnt+0x2>
 35c:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <rx_cnt+0x3>
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	a1 1d       	adc	r26, r1
 364:	b1 1d       	adc	r27, r1
 366:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rx_cnt>
 36a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <rx_cnt+0x1>
 36e:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <rx_cnt+0x2>
 372:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <rx_cnt+0x3>
}
 376:	ff 91       	pop	r31
 378:	ef 91       	pop	r30
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	bf 91       	pop	r27
 380:	af 91       	pop	r26
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	7f 91       	pop	r23
 388:	6f 91       	pop	r22
 38a:	5f 91       	pop	r21
 38c:	4f 91       	pop	r20
 38e:	3f 91       	pop	r19
 390:	2f 91       	pop	r18
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <__vector_19>:

ISR(USART_UDRE_vect){
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	2f 93       	push	r18
 3a8:	3f 93       	push	r19
 3aa:	4f 93       	push	r20
 3ac:	5f 93       	push	r21
 3ae:	6f 93       	push	r22
 3b0:	7f 93       	push	r23
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	af 93       	push	r26
 3b8:	bf 93       	push	r27
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
	++tx_cnt;// increment txCnt (since the byte has been loaded in transmitter
 3be:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <tx_cnt>
 3c2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <tx_cnt+0x1>
 3c6:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <tx_cnt+0x2>
 3ca:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <tx_cnt+0x3>
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	a1 1d       	adc	r26, r1
 3d2:	b1 1d       	adc	r27, r1
 3d4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <tx_cnt>
 3d8:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <tx_cnt+0x1>
 3dc:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <tx_cnt+0x2>
 3e0:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <tx_cnt+0x3>
	if(tx_cnt < tx_length){
 3e4:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <tx_cnt>
 3e8:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <tx_cnt+0x1>
 3ec:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <tx_cnt+0x2>
 3f0:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <tx_cnt+0x3>
 3f4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <tx_length>
 3f8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <tx_length+0x1>
 3fc:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <tx_length+0x2>
 400:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <tx_length+0x3>
 404:	48 17       	cp	r20, r24
 406:	59 07       	cpc	r21, r25
 408:	6a 07       	cpc	r22, r26
 40a:	7b 07       	cpc	r23, r27
 40c:	98 f4       	brcc	.+38     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		UDR0 = tx_buffer[tx_cnt];
 40e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <tx_cnt>
 412:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <tx_cnt+0x1>
 416:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <tx_cnt+0x2>
 41a:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <tx_cnt+0x3>
 41e:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <tx_buffer>
 422:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <tx_buffer+0x1>
 426:	f9 01       	movw	r30, r18
 428:	e8 0f       	add	r30, r24
 42a:	f9 1f       	adc	r31, r25
 42c:	80 81       	ld	r24, Z
 42e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 432:	04 c0       	rjmp	.+8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		//this clears the interrupt flag automatically.
	}
	else{
		//disable UDRE interrupt
		UCSR0B &= !(1<<UDRIE0);
 434:	e1 ec       	ldi	r30, 0xC1	; 193
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	10 82       	st	Z, r1
		//once last byte has left, TX_vect should trigger, updating the transmit state
	}
}
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	7f 91       	pop	r23
 44a:	6f 91       	pop	r22
 44c:	5f 91       	pop	r21
 44e:	4f 91       	pop	r20
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_20>:

ISR(USART_TX_vect){
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	8f 93       	push	r24
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
	// set state to only rx of coming from tx_rx
	// alternatively, when coming from tx, go back to waiting.
	if(state == tx_rx)
 46e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <state>
 472:	83 30       	cpi	r24, 0x03	; 3
 474:	21 f4       	brne	.+8      	; 0x47e <__vector_20+0x20>
		state = rx;
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__vector_20+0x24>
	else
		state = waiting;
 47e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <state>
	UART_tx_disable();
 482:	e1 ec       	ldi	r30, 0xC1	; 193
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	10 82       	st	Z, r1
}
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	8f 91       	pop	r24
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <__tablejump2__>:
 49a:	ee 0f       	add	r30, r30
 49c:	ff 1f       	adc	r31, r31
 49e:	05 90       	lpm	r0, Z+
 4a0:	f4 91       	lpm	r31, Z
 4a2:	e0 2d       	mov	r30, r0
 4a4:	09 94       	ijmp

000004a6 <memcmp>:
 4a6:	fb 01       	movw	r30, r22
 4a8:	dc 01       	movw	r26, r24
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <memcmp+0xe>
 4ac:	8d 91       	ld	r24, X+
 4ae:	01 90       	ld	r0, Z+
 4b0:	80 19       	sub	r24, r0
 4b2:	21 f4       	brne	.+8      	; 0x4bc <memcmp+0x16>
 4b4:	41 50       	subi	r20, 0x01	; 1
 4b6:	50 40       	sbci	r21, 0x00	; 0
 4b8:	c8 f7       	brcc	.-14     	; 0x4ac <memcmp+0x6>
 4ba:	88 1b       	sub	r24, r24
 4bc:	99 0b       	sbc	r25, r25
 4be:	08 95       	ret

000004c0 <_exit>:
 4c0:	f8 94       	cli

000004c2 <__stop_program>:
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <__stop_program>
