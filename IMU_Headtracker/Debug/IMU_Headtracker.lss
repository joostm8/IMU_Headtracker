
IMU_Headtracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000264  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  000002fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000873  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000740  00000000  00000000  00000c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ee  00000000  00000000  0000136f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019b  00000000  00000000  00001c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_24>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	c4 00       	.word	0x00c4	; ????
  6a:	16 01       	movw	r2, r12
  6c:	16 01       	movw	r2, r12
  6e:	16 01       	movw	r2, r12
  70:	16 01       	movw	r2, r12
  72:	16 01       	movw	r2, r12
  74:	16 01       	movw	r2, r12
  76:	16 01       	movw	r2, r12
  78:	c4 00       	.word	0x00c4	; ????
  7a:	16 01       	movw	r2, r12
  7c:	16 01       	movw	r2, r12
  7e:	16 01       	movw	r2, r12
  80:	16 01       	movw	r2, r12
  82:	16 01       	movw	r2, r12
  84:	16 01       	movw	r2, r12
  86:	16 01       	movw	r2, r12
  88:	c6 00       	.word	0x00c6	; ????
  8a:	16 01       	movw	r2, r12
  8c:	16 01       	movw	r2, r12
  8e:	16 01       	movw	r2, r12
  90:	16 01       	movw	r2, r12
  92:	16 01       	movw	r2, r12
  94:	16 01       	movw	r2, r12
  96:	16 01       	movw	r2, r12
  98:	16 01       	movw	r2, r12
  9a:	16 01       	movw	r2, r12
  9c:	16 01       	movw	r2, r12
  9e:	16 01       	movw	r2, r12
  a0:	16 01       	movw	r2, r12
  a2:	16 01       	movw	r2, r12
  a4:	16 01       	movw	r2, r12
  a6:	16 01       	movw	r2, r12
  a8:	c6 00       	.word	0x00c6	; ????
  aa:	16 01       	movw	r2, r12
  ac:	16 01       	movw	r2, r12
  ae:	16 01       	movw	r2, r12
  b0:	16 01       	movw	r2, r12
  b2:	16 01       	movw	r2, r12
  b4:	16 01       	movw	r2, r12
  b6:	16 01       	movw	r2, r12
  b8:	16 01       	movw	r2, r12
  ba:	16 01       	movw	r2, r12
  bc:	16 01       	movw	r2, r12
  be:	16 01       	movw	r2, r12
  c0:	16 01       	movw	r2, r12
  c2:	16 01       	movw	r2, r12
  c4:	16 01       	movw	r2, r12
  c6:	16 01       	movw	r2, r12
  c8:	12 01       	movw	r2, r4
  ca:	16 01       	movw	r2, r12
  cc:	16 01       	movw	r2, r12
  ce:	16 01       	movw	r2, r12
  d0:	16 01       	movw	r2, r12
  d2:	16 01       	movw	r2, r12
  d4:	16 01       	movw	r2, r12
  d6:	16 01       	movw	r2, r12
  d8:	ef 00       	.word	0x00ef	; ????
  da:	16 01       	movw	r2, r12
  dc:	16 01       	movw	r2, r12
  de:	16 01       	movw	r2, r12
  e0:	16 01       	movw	r2, r12
  e2:	16 01       	movw	r2, r12
  e4:	16 01       	movw	r2, r12
  e6:	16 01       	movw	r2, r12
  e8:	16 01       	movw	r2, r12
  ea:	16 01       	movw	r2, r12
  ec:	16 01       	movw	r2, r12
  ee:	16 01       	movw	r2, r12
  f0:	16 01       	movw	r2, r12
  f2:	16 01       	movw	r2, r12
  f4:	16 01       	movw	r2, r12
  f6:	16 01       	movw	r2, r12
  f8:	e3 00       	.word	0x00e3	; ????
  fa:	16 01       	movw	r2, r12
  fc:	16 01       	movw	r2, r12
  fe:	16 01       	movw	r2, r12
 100:	16 01       	movw	r2, r12
 102:	16 01       	movw	r2, r12
 104:	16 01       	movw	r2, r12
 106:	16 01       	movw	r2, r12
 108:	01 01       	movw	r0, r2

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d8 e0       	ldi	r29, 0x08	; 8
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	e4 e6       	ldi	r30, 0x64	; 100
 11e:	f2 e0       	ldi	r31, 0x02	; 2
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	a2 30       	cpi	r26, 0x02	; 2
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	a2 e0       	ldi	r26, 0x02	; 2
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	a9 30       	cpi	r26, 0x09	; 9
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	0e 94 a4 00 	call	0x148	; 0x148 <main>
 140:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <main>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	ff cf       	rjmp	.-2      	; 0x150 <main+0x8>

00000152 <__vector_24>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 16c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 170:	8e 2f       	mov	r24, r30
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	38 97       	sbiw	r30, 0x08	; 8
 178:	e1 35       	cpi	r30, 0x51	; 81
 17a:	f1 05       	cpc	r31, r1
 17c:	08 f0       	brcs	.+2      	; 0x180 <__vector_24+0x2e>
 17e:	56 c0       	rjmp	.+172    	; 0x22c <__vector_24+0xda>
 180:	ec 5c       	subi	r30, 0xCC	; 204
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	0c 94 2a 01 	jmp	0x254	; 0x254 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 188:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 18c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 190:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_msgSize>
 194:	e8 17       	cp	r30, r24
 196:	70 f4       	brcc	.+28     	; 0x1b4 <__vector_24+0x62>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	8e 0f       	add	r24, r30
 19c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	eb 5f       	subi	r30, 0xFB	; 251
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	80 81       	ld	r24, Z
 1a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1ac:	85 e8       	ldi	r24, 0x85	; 133
 1ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1b2:	43 c0       	rjmp	.+134    	; 0x23a <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 1b4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1be:	84 e9       	ldi	r24, 0x94	; 148
 1c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1c4:	3a c0       	rjmp	.+116    	; 0x23a <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 1c6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	8e 0f       	add	r24, r30
 1ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	eb 5f       	subi	r30, 0xFB	; 251
 1da:	fe 4f       	sbci	r31, 0xFE	; 254
 1dc:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 1de:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_msgSize>
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	28 17       	cp	r18, r24
 1ee:	39 07       	cpc	r19, r25
 1f0:	24 f4       	brge	.+8      	; 0x1fa <__vector_24+0xa8>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1f2:	85 ec       	ldi	r24, 0xC5	; 197
 1f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1f8:	20 c0       	rjmp	.+64     	; 0x23a <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1fa:	85 e8       	ldi	r24, 0x85	; 133
 1fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 200:	1c c0       	rjmp	.+56     	; 0x23a <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 202:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 206:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	eb 5f       	subi	r30, 0xFB	; 251
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 212:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 216:	81 60       	ori	r24, 0x01	; 1
 218:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 21c:	84 e9       	ldi	r24, 0x94	; 148
 21e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 222:	0b c0       	rjmp	.+22     	; 0x23a <__vector_24+0xe8>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 224:	85 ea       	ldi	r24, 0xA5	; 165
 226:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 22a:	07 c0       	rjmp	.+14     	; 0x23a <__vector_24+0xe8>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 22c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 230:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 234:	84 e0       	ldi	r24, 0x04	; 4
 236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	bf 91       	pop	r27
 240:	af 91       	pop	r26
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <__tablejump2__>:
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	05 90       	lpm	r0, Z+
 25a:	f4 91       	lpm	r31, Z
 25c:	e0 2d       	mov	r30, r0
 25e:	09 94       	ijmp

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
