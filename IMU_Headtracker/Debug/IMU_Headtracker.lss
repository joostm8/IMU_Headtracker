
IMU_Headtracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000b20  00000bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800166  00800166  00000c1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be9  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000908  00000000  00000000  00001915  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b3  00000000  00000000  0000221d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  000029d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000588  00000000  00000000  00002be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c8  00000000  00000000  00003168  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003830  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__vector_18>
  4c:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__vector_19>
  50:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__vector_20>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_24>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	bc 03       	fmulsu	r19, r20
  6a:	0e 04       	cpc	r0, r14
  6c:	0e 04       	cpc	r0, r14
  6e:	0e 04       	cpc	r0, r14
  70:	0e 04       	cpc	r0, r14
  72:	0e 04       	cpc	r0, r14
  74:	0e 04       	cpc	r0, r14
  76:	0e 04       	cpc	r0, r14
  78:	bc 03       	fmulsu	r19, r20
  7a:	0e 04       	cpc	r0, r14
  7c:	0e 04       	cpc	r0, r14
  7e:	0e 04       	cpc	r0, r14
  80:	0e 04       	cpc	r0, r14
  82:	0e 04       	cpc	r0, r14
  84:	0e 04       	cpc	r0, r14
  86:	0e 04       	cpc	r0, r14
  88:	be 03       	fmulsu	r19, r22
  8a:	0e 04       	cpc	r0, r14
  8c:	0e 04       	cpc	r0, r14
  8e:	0e 04       	cpc	r0, r14
  90:	0e 04       	cpc	r0, r14
  92:	0e 04       	cpc	r0, r14
  94:	0e 04       	cpc	r0, r14
  96:	0e 04       	cpc	r0, r14
  98:	0e 04       	cpc	r0, r14
  9a:	0e 04       	cpc	r0, r14
  9c:	0e 04       	cpc	r0, r14
  9e:	0e 04       	cpc	r0, r14
  a0:	0e 04       	cpc	r0, r14
  a2:	0e 04       	cpc	r0, r14
  a4:	0e 04       	cpc	r0, r14
  a6:	0e 04       	cpc	r0, r14
  a8:	be 03       	fmulsu	r19, r22
  aa:	0e 04       	cpc	r0, r14
  ac:	0e 04       	cpc	r0, r14
  ae:	0e 04       	cpc	r0, r14
  b0:	0e 04       	cpc	r0, r14
  b2:	0e 04       	cpc	r0, r14
  b4:	0e 04       	cpc	r0, r14
  b6:	0e 04       	cpc	r0, r14
  b8:	0e 04       	cpc	r0, r14
  ba:	0e 04       	cpc	r0, r14
  bc:	0e 04       	cpc	r0, r14
  be:	0e 04       	cpc	r0, r14
  c0:	0e 04       	cpc	r0, r14
  c2:	0e 04       	cpc	r0, r14
  c4:	0e 04       	cpc	r0, r14
  c6:	0e 04       	cpc	r0, r14
  c8:	0a 04       	cpc	r0, r10
  ca:	0e 04       	cpc	r0, r14
  cc:	0e 04       	cpc	r0, r14
  ce:	0e 04       	cpc	r0, r14
  d0:	0e 04       	cpc	r0, r14
  d2:	0e 04       	cpc	r0, r14
  d4:	0e 04       	cpc	r0, r14
  d6:	0e 04       	cpc	r0, r14
  d8:	e7 03       	fmuls	r22, r23
  da:	0e 04       	cpc	r0, r14
  dc:	0e 04       	cpc	r0, r14
  de:	0e 04       	cpc	r0, r14
  e0:	0e 04       	cpc	r0, r14
  e2:	0e 04       	cpc	r0, r14
  e4:	0e 04       	cpc	r0, r14
  e6:	0e 04       	cpc	r0, r14
  e8:	0e 04       	cpc	r0, r14
  ea:	0e 04       	cpc	r0, r14
  ec:	0e 04       	cpc	r0, r14
  ee:	0e 04       	cpc	r0, r14
  f0:	0e 04       	cpc	r0, r14
  f2:	0e 04       	cpc	r0, r14
  f4:	0e 04       	cpc	r0, r14
  f6:	0e 04       	cpc	r0, r14
  f8:	db 03       	fmulsu	r21, r19
  fa:	0e 04       	cpc	r0, r14
  fc:	0e 04       	cpc	r0, r14
  fe:	0e 04       	cpc	r0, r14
 100:	0e 04       	cpc	r0, r14
 102:	0e 04       	cpc	r0, r14
 104:	0e 04       	cpc	r0, r14
 106:	0e 04       	cpc	r0, r14
 108:	f9 03       	fmulsu	r23, r17

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d8 e0       	ldi	r29, 0x08	; 8
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	e0 e2       	ldi	r30, 0x20	; 32
 11e:	fb e0       	ldi	r31, 0x0B	; 11
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	a6 36       	cpi	r26, 0x66	; 102
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	a6 e6       	ldi	r26, 0x66	; 102
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	a5 38       	cpi	r26, 0x85	; 133
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <main>
 140:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <_Z19MPU_9250_initialisev>:
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	00 d0       	rcall	.+0      	; 0x154 <_Z19MPU_9250_initialisev+0xc>
 154:	1f 92       	push	r1
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	0f 2e       	mov	r0, r31
 15c:	f0 ed       	ldi	r31, 0xD0	; 208
 15e:	ff 2e       	mov	r15, r31
 160:	f0 2d       	mov	r31, r0
 162:	f9 82       	std	Y+1, r15	; 0x01
 164:	8b e6       	ldi	r24, 0x6B	; 107
 166:	8a 83       	std	Y+2, r24	; 0x02
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	8b 83       	std	Y+3, r24	; 0x03
 16c:	63 e0       	ldi	r22, 0x03	; 3
 16e:	8e 01       	movw	r16, r28
 170:	0f 5f       	subi	r16, 0xFF	; 255
 172:	1f 4f       	sbci	r17, 0xFF	; 255
 174:	c8 01       	movw	r24, r16
 176:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TWI_Start_Transceiver_With_Data>
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	f8 01       	movw	r30, r16
 17e:	11 92       	st	Z+, r1
 180:	8a 95       	dec	r24
 182:	e9 f7       	brne	.-6      	; 0x17e <_Z19MPU_9250_initialisev+0x36>
 184:	f9 82       	std	Y+1, r15	; 0x01
 186:	87 e3       	ldi	r24, 0x37	; 55
 188:	8a 83       	std	Y+2, r24	; 0x02
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	8b 83       	std	Y+3, r24	; 0x03
 18e:	63 e0       	ldi	r22, 0x03	; 3
 190:	c8 01       	movw	r24, r16
 192:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TWI_Start_Transceiver_With_Data>
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	08 95       	ret

000001a8 <_Z19read_gyroscope_dataPi>:
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	29 97       	sbiw	r28, 0x09	; 9
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
 1c0:	8c 01       	movw	r16, r24
 1c2:	80 ed       	ldi	r24, 0xD0	; 208
 1c4:	89 83       	std	Y+1, r24	; 0x01
 1c6:	83 e4       	ldi	r24, 0x43	; 67
 1c8:	8a 83       	std	Y+2, r24	; 0x02
 1ca:	81 ed       	ldi	r24, 0xD1	; 209
 1cc:	8b 83       	std	Y+3, r24	; 0x03
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	ce 01       	movw	r24, r28
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TWI_Start_Transceiver_With_Data>
 1d8:	67 e0       	ldi	r22, 0x07	; 7
 1da:	ce 01       	movw	r24, r28
 1dc:	03 96       	adiw	r24, 0x03	; 3
 1de:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TWI_Start_Transceiver_With_Data>
 1e2:	67 e0       	ldi	r22, 0x07	; 7
 1e4:	ce 01       	movw	r24, r28
 1e6:	03 96       	adiw	r24, 0x03	; 3
 1e8:	0e 94 81 03 	call	0x702	; 0x702 <TWI_Get_Data_From_Transceiver>
 1ec:	8c 81       	ldd	r24, Y+4	; 0x04
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	98 2f       	mov	r25, r24
 1f2:	88 27       	eor	r24, r24
 1f4:	2d 81       	ldd	r18, Y+5	; 0x05
 1f6:	82 2b       	or	r24, r18
 1f8:	f8 01       	movw	r30, r16
 1fa:	91 83       	std	Z+1, r25	; 0x01
 1fc:	80 83       	st	Z, r24
 1fe:	8e 81       	ldd	r24, Y+6	; 0x06
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	98 2f       	mov	r25, r24
 204:	88 27       	eor	r24, r24
 206:	2f 81       	ldd	r18, Y+7	; 0x07
 208:	82 2b       	or	r24, r18
 20a:	93 83       	std	Z+3, r25	; 0x03
 20c:	82 83       	std	Z+2, r24	; 0x02
 20e:	88 85       	ldd	r24, Y+8	; 0x08
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	98 2f       	mov	r25, r24
 214:	88 27       	eor	r24, r24
 216:	29 85       	ldd	r18, Y+9	; 0x09
 218:	82 2b       	or	r24, r18
 21a:	95 83       	std	Z+5, r25	; 0x05
 21c:	84 83       	std	Z+4, r24	; 0x04
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	29 96       	adiw	r28, 0x09	; 9
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	08 95       	ret

00000236 <_Z13set_gyro_biasPi>:
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
 23e:	28 97       	sbiw	r28, 0x08	; 8
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	de bf       	out	0x3e, r29	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	cd bf       	out	0x3d, r28	; 61
 24a:	fc 01       	movw	r30, r24
 24c:	40 81       	ld	r20, Z
 24e:	51 81       	ldd	r21, Z+1	; 0x01
 250:	51 95       	neg	r21
 252:	41 95       	neg	r20
 254:	51 09       	sbc	r21, r1
 256:	51 83       	std	Z+1, r21	; 0x01
 258:	40 83       	st	Z, r20
 25a:	22 81       	ldd	r18, Z+2	; 0x02
 25c:	33 81       	ldd	r19, Z+3	; 0x03
 25e:	31 95       	neg	r19
 260:	21 95       	neg	r18
 262:	31 09       	sbc	r19, r1
 264:	33 83       	std	Z+3, r19	; 0x03
 266:	22 83       	std	Z+2, r18	; 0x02
 268:	84 81       	ldd	r24, Z+4	; 0x04
 26a:	95 81       	ldd	r25, Z+5	; 0x05
 26c:	91 95       	neg	r25
 26e:	81 95       	neg	r24
 270:	91 09       	sbc	r25, r1
 272:	95 83       	std	Z+5, r25	; 0x05
 274:	84 83       	std	Z+4, r24	; 0x04
 276:	51 81       	ldd	r21, Z+1	; 0x01
 278:	33 81       	ldd	r19, Z+3	; 0x03
 27a:	95 81       	ldd	r25, Z+5	; 0x05
 27c:	60 ed       	ldi	r22, 0xD0	; 208
 27e:	69 83       	std	Y+1, r22	; 0x01
 280:	63 e1       	ldi	r22, 0x13	; 19
 282:	6a 83       	std	Y+2, r22	; 0x02
 284:	5b 83       	std	Y+3, r21	; 0x03
 286:	4c 83       	std	Y+4, r20	; 0x04
 288:	3d 83       	std	Y+5, r19	; 0x05
 28a:	2e 83       	std	Y+6, r18	; 0x06
 28c:	9f 83       	std	Y+7, r25	; 0x07
 28e:	88 87       	std	Y+8, r24	; 0x08
 290:	68 e0       	ldi	r22, 0x08	; 8
 292:	ce 01       	movw	r24, r28
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TWI_Start_Transceiver_With_Data>
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	28 96       	adiw	r28, 0x08	; 8
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	de bf       	out	0x3e, r29	; 62
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	cd bf       	out	0x3d, r28	; 61
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <_Z19calibrate_gyroscopev>:
 2ae:	4f 92       	push	r4
 2b0:	5f 92       	push	r5
 2b2:	6f 92       	push	r6
 2b4:	7f 92       	push	r7
 2b6:	8f 92       	push	r8
 2b8:	9f 92       	push	r9
 2ba:	af 92       	push	r10
 2bc:	bf 92       	push	r11
 2be:	cf 92       	push	r12
 2c0:	df 92       	push	r13
 2c2:	ef 92       	push	r14
 2c4:	ff 92       	push	r15
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	2f 97       	sbiw	r28, 0x0f	; 15
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	80 ed       	ldi	r24, 0xD0	; 208
 2e0:	89 83       	std	Y+1, r24	; 0x01
 2e2:	8b e1       	ldi	r24, 0x1B	; 27
 2e4:	8a 83       	std	Y+2, r24	; 0x02
 2e6:	80 e1       	ldi	r24, 0x10	; 16
 2e8:	8b 83       	std	Y+3, r24	; 0x03
 2ea:	63 e0       	ldi	r22, 0x03	; 3
 2ec:	ce 01       	movw	r24, r28
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TWI_Start_Transceiver_With_Data>
 2f4:	00 e0       	ldi	r16, 0x00	; 0
 2f6:	14 e0       	ldi	r17, 0x04	; 4
 2f8:	ce 01       	movw	r24, r28
 2fa:	04 96       	adiw	r24, 0x04	; 4
 2fc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z19read_gyroscope_dataPi>
 300:	8c 81       	ldd	r24, Y+4	; 0x04
 302:	9d 81       	ldd	r25, Y+5	; 0x05
 304:	09 2e       	mov	r0, r25
 306:	00 0c       	add	r0, r0
 308:	aa 0b       	sbc	r26, r26
 30a:	bb 0b       	sbc	r27, r27
 30c:	48 0e       	add	r4, r24
 30e:	59 1e       	adc	r5, r25
 310:	6a 1e       	adc	r6, r26
 312:	7b 1e       	adc	r7, r27
 314:	8e 81       	ldd	r24, Y+6	; 0x06
 316:	9f 81       	ldd	r25, Y+7	; 0x07
 318:	09 2e       	mov	r0, r25
 31a:	00 0c       	add	r0, r0
 31c:	aa 0b       	sbc	r26, r26
 31e:	bb 0b       	sbc	r27, r27
 320:	88 0e       	add	r8, r24
 322:	99 1e       	adc	r9, r25
 324:	aa 1e       	adc	r10, r26
 326:	bb 1e       	adc	r11, r27
 328:	88 85       	ldd	r24, Y+8	; 0x08
 32a:	99 85       	ldd	r25, Y+9	; 0x09
 32c:	09 2e       	mov	r0, r25
 32e:	00 0c       	add	r0, r0
 330:	aa 0b       	sbc	r26, r26
 332:	bb 0b       	sbc	r27, r27
 334:	c8 0e       	add	r12, r24
 336:	d9 1e       	adc	r13, r25
 338:	ea 1e       	adc	r14, r26
 33a:	fb 1e       	adc	r15, r27
 33c:	89 ef       	ldi	r24, 0xF9	; 249
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <_Z19calibrate_gyroscopev+0x92>
 344:	00 c0       	rjmp	.+0      	; 0x346 <_Z19calibrate_gyroscopev+0x98>
 346:	00 00       	nop
 348:	01 50       	subi	r16, 0x01	; 1
 34a:	11 09       	sbc	r17, r1
 34c:	a9 f6       	brne	.-86     	; 0x2f8 <_Z19calibrate_gyroscopev+0x4a>
 34e:	d3 01       	movw	r26, r6
 350:	c2 01       	movw	r24, r4
 352:	77 20       	and	r7, r7
 354:	24 f4       	brge	.+8      	; 0x35e <_Z19calibrate_gyroscopev+0xb0>
 356:	81 50       	subi	r24, 0x01	; 1
 358:	9c 4f       	sbci	r25, 0xFC	; 252
 35a:	af 4f       	sbci	r26, 0xFF	; 255
 35c:	bf 4f       	sbci	r27, 0xFF	; 255
 35e:	07 2e       	mov	r0, r23
 360:	7a e0       	ldi	r23, 0x0A	; 10
 362:	b5 95       	asr	r27
 364:	a7 95       	ror	r26
 366:	97 95       	ror	r25
 368:	87 95       	ror	r24
 36a:	7a 95       	dec	r23
 36c:	d1 f7       	brne	.-12     	; 0x362 <_Z19calibrate_gyroscopev+0xb4>
 36e:	70 2d       	mov	r23, r0
 370:	9b 87       	std	Y+11, r25	; 0x0b
 372:	8a 87       	std	Y+10, r24	; 0x0a
 374:	d5 01       	movw	r26, r10
 376:	c4 01       	movw	r24, r8
 378:	bb 20       	and	r11, r11
 37a:	24 f4       	brge	.+8      	; 0x384 <_Z19calibrate_gyroscopev+0xd6>
 37c:	81 50       	subi	r24, 0x01	; 1
 37e:	9c 4f       	sbci	r25, 0xFC	; 252
 380:	af 4f       	sbci	r26, 0xFF	; 255
 382:	bf 4f       	sbci	r27, 0xFF	; 255
 384:	07 2e       	mov	r0, r23
 386:	7a e0       	ldi	r23, 0x0A	; 10
 388:	b5 95       	asr	r27
 38a:	a7 95       	ror	r26
 38c:	97 95       	ror	r25
 38e:	87 95       	ror	r24
 390:	7a 95       	dec	r23
 392:	d1 f7       	brne	.-12     	; 0x388 <_Z19calibrate_gyroscopev+0xda>
 394:	70 2d       	mov	r23, r0
 396:	9d 87       	std	Y+13, r25	; 0x0d
 398:	8c 87       	std	Y+12, r24	; 0x0c
 39a:	d7 01       	movw	r26, r14
 39c:	c6 01       	movw	r24, r12
 39e:	ff 20       	and	r15, r15
 3a0:	24 f4       	brge	.+8      	; 0x3aa <_Z19calibrate_gyroscopev+0xfc>
 3a2:	81 50       	subi	r24, 0x01	; 1
 3a4:	9c 4f       	sbci	r25, 0xFC	; 252
 3a6:	af 4f       	sbci	r26, 0xFF	; 255
 3a8:	bf 4f       	sbci	r27, 0xFF	; 255
 3aa:	07 2e       	mov	r0, r23
 3ac:	7a e0       	ldi	r23, 0x0A	; 10
 3ae:	b5 95       	asr	r27
 3b0:	a7 95       	ror	r26
 3b2:	97 95       	ror	r25
 3b4:	87 95       	ror	r24
 3b6:	7a 95       	dec	r23
 3b8:	d1 f7       	brne	.-12     	; 0x3ae <_Z19calibrate_gyroscopev+0x100>
 3ba:	70 2d       	mov	r23, r0
 3bc:	9f 87       	std	Y+15, r25	; 0x0f
 3be:	8e 87       	std	Y+14, r24	; 0x0e
 3c0:	ce 01       	movw	r24, r28
 3c2:	0a 96       	adiw	r24, 0x0a	; 10
 3c4:	0e 94 1b 01 	call	0x236	; 0x236 <_Z13set_gyro_biasPi>
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	2f 96       	adiw	r28, 0x0f	; 15
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	df 90       	pop	r13
 3e4:	cf 90       	pop	r12
 3e6:	bf 90       	pop	r11
 3e8:	af 90       	pop	r10
 3ea:	9f 90       	pop	r9
 3ec:	8f 90       	pop	r8
 3ee:	7f 90       	pop	r7
 3f0:	6f 90       	pop	r6
 3f2:	5f 90       	pop	r5
 3f4:	4f 90       	pop	r4
 3f6:	08 95       	ret

000003f8 <_Z17read_magnetometerPi>:
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
 404:	29 97       	sbiw	r28, 0x09	; 9
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	f8 94       	cli
 40a:	de bf       	out	0x3e, r29	; 62
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	cd bf       	out	0x3d, r28	; 61
 410:	8c 01       	movw	r16, r24
 412:	88 e1       	ldi	r24, 0x18	; 24
 414:	89 83       	std	Y+1, r24	; 0x01
 416:	83 e0       	ldi	r24, 0x03	; 3
 418:	8a 83       	std	Y+2, r24	; 0x02
 41a:	89 e1       	ldi	r24, 0x19	; 25
 41c:	8b 83       	std	Y+3, r24	; 0x03
 41e:	62 e0       	ldi	r22, 0x02	; 2
 420:	ce 01       	movw	r24, r28
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TWI_Start_Transceiver_With_Data>
 428:	67 e0       	ldi	r22, 0x07	; 7
 42a:	ce 01       	movw	r24, r28
 42c:	03 96       	adiw	r24, 0x03	; 3
 42e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TWI_Start_Transceiver_With_Data>
 432:	67 e0       	ldi	r22, 0x07	; 7
 434:	ce 01       	movw	r24, r28
 436:	03 96       	adiw	r24, 0x03	; 3
 438:	0e 94 81 03 	call	0x702	; 0x702 <TWI_Get_Data_From_Transceiver>
 43c:	8d 81       	ldd	r24, Y+5	; 0x05
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	98 2f       	mov	r25, r24
 442:	88 27       	eor	r24, r24
 444:	2c 81       	ldd	r18, Y+4	; 0x04
 446:	82 2b       	or	r24, r18
 448:	f8 01       	movw	r30, r16
 44a:	91 83       	std	Z+1, r25	; 0x01
 44c:	80 83       	st	Z, r24
 44e:	8f 81       	ldd	r24, Y+7	; 0x07
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	98 2f       	mov	r25, r24
 454:	88 27       	eor	r24, r24
 456:	2e 81       	ldd	r18, Y+6	; 0x06
 458:	82 2b       	or	r24, r18
 45a:	93 83       	std	Z+3, r25	; 0x03
 45c:	82 83       	std	Z+2, r24	; 0x02
 45e:	89 85       	ldd	r24, Y+9	; 0x09
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	98 2f       	mov	r25, r24
 464:	88 27       	eor	r24, r24
 466:	28 85       	ldd	r18, Y+8	; 0x08
 468:	82 2b       	or	r24, r18
 46a:	95 83       	std	Z+5, r25	; 0x05
 46c:	84 83       	std	Z+4, r24	; 0x04
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	29 96       	adiw	r28, 0x09	; 9
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	f8 94       	cli
 476:	de bf       	out	0x3e, r29	; 62
 478:	0f be       	out	0x3f, r0	; 63
 47a:	cd bf       	out	0x3d, r28	; 61
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	08 95       	ret

00000486 <_Z22calibrate_magnetometerv>:
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	cd b7       	in	r28, 0x3d	; 61
 48c:	de b7       	in	r29, 0x3e	; 62
 48e:	65 97       	sbiw	r28, 0x15	; 21
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
 49a:	88 e1       	ldi	r24, 0x18	; 24
 49c:	89 83       	std	Y+1, r24	; 0x01
 49e:	8a e0       	ldi	r24, 0x0A	; 10
 4a0:	8a 83       	std	Y+2, r24	; 0x02
 4a2:	86 e1       	ldi	r24, 0x16	; 22
 4a4:	8b 83       	std	Y+3, r24	; 0x03
 4a6:	63 e0       	ldi	r22, 0x03	; 3
 4a8:	ce 01       	movw	r24, r28
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TWI_Start_Transceiver_With_Data>
 4b0:	86 e0       	ldi	r24, 0x06	; 6
 4b2:	e1 e0       	ldi	r30, 0x01	; 1
 4b4:	f1 e0       	ldi	r31, 0x01	; 1
 4b6:	de 01       	movw	r26, r28
 4b8:	1a 96       	adiw	r26, 0x0a	; 10
 4ba:	01 90       	ld	r0, Z+
 4bc:	0d 92       	st	X+, r0
 4be:	8a 95       	dec	r24
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <_Z22calibrate_magnetometerv+0x34>
 4c2:	86 e0       	ldi	r24, 0x06	; 6
 4c4:	e7 e0       	ldi	r30, 0x07	; 7
 4c6:	f1 e0       	ldi	r31, 0x01	; 1
 4c8:	de 01       	movw	r26, r28
 4ca:	50 96       	adiw	r26, 0x10	; 16
 4cc:	01 90       	ld	r0, Z+
 4ce:	0d 92       	st	X+, r0
 4d0:	8a 95       	dec	r24
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <_Z22calibrate_magnetometerv+0x46>
 4d4:	8e 01       	movw	r16, r28
 4d6:	0a 5e       	subi	r16, 0xEA	; 234
 4d8:	1f 4f       	sbci	r17, 0xFF	; 255
 4da:	ce 01       	movw	r24, r28
 4dc:	04 96       	adiw	r24, 0x04	; 4
 4de:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_Z17read_magnetometerPi>
 4e2:	9e 01       	movw	r18, r28
 4e4:	2c 5f       	subi	r18, 0xFC	; 252
 4e6:	3f 4f       	sbci	r19, 0xFF	; 255
 4e8:	fe 01       	movw	r30, r28
 4ea:	70 96       	adiw	r30, 0x10	; 16
 4ec:	be 01       	movw	r22, r28
 4ee:	66 5f       	subi	r22, 0xF6	; 246
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	d9 01       	movw	r26, r18
 4f4:	8d 91       	ld	r24, X+
 4f6:	9d 91       	ld	r25, X+
 4f8:	9d 01       	movw	r18, r26
 4fa:	40 81       	ld	r20, Z
 4fc:	51 81       	ldd	r21, Z+1	; 0x01
 4fe:	84 17       	cp	r24, r20
 500:	95 07       	cpc	r25, r21
 502:	14 f4       	brge	.+4      	; 0x508 <_Z22calibrate_magnetometerv+0x82>
 504:	91 83       	std	Z+1, r25	; 0x01
 506:	80 83       	st	Z, r24
 508:	db 01       	movw	r26, r22
 50a:	4d 91       	ld	r20, X+
 50c:	5c 91       	ld	r21, X
 50e:	11 97       	sbiw	r26, 0x01	; 1
 510:	48 17       	cp	r20, r24
 512:	59 07       	cpc	r21, r25
 514:	14 f4       	brge	.+4      	; 0x51a <_Z22calibrate_magnetometerv+0x94>
 516:	8d 93       	st	X+, r24
 518:	9c 93       	st	X, r25
 51a:	32 96       	adiw	r30, 0x02	; 2
 51c:	6e 5f       	subi	r22, 0xFE	; 254
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	e0 17       	cp	r30, r16
 522:	f1 07       	cpc	r31, r17
 524:	31 f7       	brne	.-52     	; 0x4f2 <_Z22calibrate_magnetometerv+0x6c>
 526:	8f e1       	ldi	r24, 0x1F	; 31
 528:	9e e4       	ldi	r25, 0x4E	; 78
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <_Z22calibrate_magnetometerv+0xa4>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <_Z22calibrate_magnetometerv+0xaa>
 530:	00 00       	nop
 532:	d3 cf       	rjmp	.-90     	; 0x4da <_Z22calibrate_magnetometerv+0x54>

00000534 <_Z22get_magnetometer_scalev>:
 534:	0f 93       	push	r16
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 540:	27 97       	sbiw	r28, 0x07	; 7
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	f8 94       	cli
 546:	de bf       	out	0x3e, r29	; 62
 548:	0f be       	out	0x3f, r0	; 63
 54a:	cd bf       	out	0x3d, r28	; 61
 54c:	18 e1       	ldi	r17, 0x18	; 24
 54e:	19 83       	std	Y+1, r17	; 0x01
 550:	0a e0       	ldi	r16, 0x0A	; 10
 552:	0a 83       	std	Y+2, r16	; 0x02
 554:	8f e0       	ldi	r24, 0x0F	; 15
 556:	8b 83       	std	Y+3, r24	; 0x03
 558:	63 e0       	ldi	r22, 0x03	; 3
 55a:	ce 01       	movw	r24, r28
 55c:	01 96       	adiw	r24, 0x01	; 1
 55e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TWI_Start_Transceiver_With_Data>
 562:	19 83       	std	Y+1, r17	; 0x01
 564:	80 e1       	ldi	r24, 0x10	; 16
 566:	8a 83       	std	Y+2, r24	; 0x02
 568:	89 e1       	ldi	r24, 0x19	; 25
 56a:	8c 83       	std	Y+4, r24	; 0x04
 56c:	62 e0       	ldi	r22, 0x02	; 2
 56e:	ce 01       	movw	r24, r28
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TWI_Start_Transceiver_With_Data>
 576:	64 e0       	ldi	r22, 0x04	; 4
 578:	ce 01       	movw	r24, r28
 57a:	04 96       	adiw	r24, 0x04	; 4
 57c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TWI_Start_Transceiver_With_Data>
 580:	64 e0       	ldi	r22, 0x04	; 4
 582:	ce 01       	movw	r24, r28
 584:	04 96       	adiw	r24, 0x04	; 4
 586:	0e 94 81 03 	call	0x702	; 0x702 <TWI_Get_Data_From_Transceiver>
 58a:	e6 e6       	ldi	r30, 0x66	; 102
 58c:	f1 e0       	ldi	r31, 0x01	; 1
 58e:	8d 81       	ldd	r24, Y+5	; 0x05
 590:	80 83       	st	Z, r24
 592:	8e 81       	ldd	r24, Y+6	; 0x06
 594:	81 83       	std	Z+1, r24	; 0x01
 596:	8f 81       	ldd	r24, Y+7	; 0x07
 598:	82 83       	std	Z+2, r24	; 0x02
 59a:	19 83       	std	Y+1, r17	; 0x01
 59c:	0a 83       	std	Y+2, r16	; 0x02
 59e:	1b 82       	std	Y+3, r1	; 0x03
 5a0:	63 e0       	ldi	r22, 0x03	; 3
 5a2:	ce 01       	movw	r24, r28
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <TWI_Start_Transceiver_With_Data>
 5aa:	87 ec       	ldi	r24, 0xC7	; 199
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	01 97       	sbiw	r24, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <_Z22get_magnetometer_scalev+0x7a>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <_Z22get_magnetometer_scalev+0x80>
 5b4:	00 00       	nop
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	27 96       	adiw	r28, 0x07	; 7
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	f8 94       	cli
 5be:	de bf       	out	0x3e, r29	; 62
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	cd bf       	out	0x3d, r28	; 61
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	1f 91       	pop	r17
 5ca:	0f 91       	pop	r16
 5cc:	08 95       	ret

000005ce <main>:
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
 5d6:	e2 97       	sbiw	r28, 0x32	; 50
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	de bf       	out	0x3e, r29	; 62
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	cd bf       	out	0x3d, r28	; 61
 5e2:	0e 94 4a 03 	call	0x694	; 0x694 <TWI_Master_Initialise>
 5e6:	0e 94 22 04 	call	0x844	; 0x844 <UART_initialise>
 5ea:	78 94       	sei
 5ec:	8f e2       	ldi	r24, 0x2F	; 47
 5ee:	ed e0       	ldi	r30, 0x0D	; 13
 5f0:	f1 e0       	ldi	r31, 0x01	; 1
 5f2:	8e 01       	movw	r16, r28
 5f4:	0f 5f       	subi	r16, 0xFF	; 255
 5f6:	1f 4f       	sbci	r17, 0xFF	; 255
 5f8:	d8 01       	movw	r26, r16
 5fa:	01 90       	ld	r0, Z+
 5fc:	0d 92       	st	X+, r0
 5fe:	8a 95       	dec	r24
 600:	e1 f7       	brne	.-8      	; 0x5fa <main+0x2c>
 602:	f8 01       	movw	r30, r16
 604:	01 90       	ld	r0, Z+
 606:	00 20       	and	r0, r0
 608:	e9 f7       	brne	.-6      	; 0x604 <main+0x36>
 60a:	31 97       	sbiw	r30, 0x01	; 1
 60c:	af 01       	movw	r20, r30
 60e:	40 1b       	sub	r20, r16
 610:	51 0b       	sbc	r21, r17
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	c8 01       	movw	r24, r16
 618:	0e 94 2f 04 	call	0x85e	; 0x85e <UART_tx>
 61c:	0f 2e       	mov	r0, r31
 61e:	f2 e3       	ldi	r31, 0x32	; 50
 620:	ff 2e       	mov	r15, r31
 622:	f0 2d       	mov	r31, r0
 624:	f8 01       	movw	r30, r16
 626:	2f 2d       	mov	r18, r15
 628:	11 92       	st	Z+, r1
 62a:	2a 95       	dec	r18
 62c:	e9 f7       	brne	.-6      	; 0x628 <main+0x5a>
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	91 e1       	ldi	r25, 0x11	; 17
 632:	ea e7       	ldi	r30, 0x7A	; 122
 634:	81 50       	subi	r24, 0x01	; 1
 636:	90 40       	sbci	r25, 0x00	; 0
 638:	e0 40       	sbci	r30, 0x00	; 0
 63a:	e1 f7       	brne	.-8      	; 0x634 <main+0x66>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <main+0x70>
 63e:	00 00       	nop
 640:	0e 94 a4 00 	call	0x148	; 0x148 <_Z19MPU_9250_initialisev>
 644:	0e 94 57 01 	call	0x2ae	; 0x2ae <_Z19calibrate_gyroscopev>
 648:	87 e2       	ldi	r24, 0x27	; 39
 64a:	ec e3       	ldi	r30, 0x3C	; 60
 64c:	f1 e0       	ldi	r31, 0x01	; 1
 64e:	d8 01       	movw	r26, r16
 650:	01 90       	ld	r0, Z+
 652:	0d 92       	st	X+, r0
 654:	8a 95       	dec	r24
 656:	e1 f7       	brne	.-8      	; 0x650 <main+0x82>
 658:	f8 01       	movw	r30, r16
 65a:	01 90       	ld	r0, Z+
 65c:	00 20       	and	r0, r0
 65e:	e9 f7       	brne	.-6      	; 0x65a <main+0x8c>
 660:	31 97       	sbiw	r30, 0x01	; 1
 662:	af 01       	movw	r20, r30
 664:	40 1b       	sub	r20, r16
 666:	51 0b       	sbc	r21, r17
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	70 e0       	ldi	r23, 0x00	; 0
 66c:	c8 01       	movw	r24, r16
 66e:	0e 94 2f 04 	call	0x85e	; 0x85e <UART_tx>
 672:	f8 01       	movw	r30, r16
 674:	11 92       	st	Z+, r1
 676:	fa 94       	dec	r15
 678:	e9 f7       	brne	.-6      	; 0x674 <main+0xa6>
 67a:	ff ef       	ldi	r31, 0xFF	; 255
 67c:	21 e1       	ldi	r18, 0x11	; 17
 67e:	8a e7       	ldi	r24, 0x7A	; 122
 680:	f1 50       	subi	r31, 0x01	; 1
 682:	20 40       	sbci	r18, 0x00	; 0
 684:	80 40       	sbci	r24, 0x00	; 0
 686:	e1 f7       	brne	.-8      	; 0x680 <main+0xb2>
 688:	00 c0       	rjmp	.+0      	; 0x68a <main+0xbc>
 68a:	00 00       	nop
 68c:	0e 94 9a 02 	call	0x534	; 0x534 <_Z22get_magnetometer_scalev>
 690:	0e 94 43 02 	call	0x486	; 0x486 <_Z22calibrate_magnetometerv>

00000694 <TWI_Master_Initialise>:
void TWI_Start_Transceiver( void )
{
  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.
  TWI_statusReg.all = 0;      
  TWI_state         = TWI_NO_STATE ;
  TWCR = (1<<TWEN)|                             // TWI Interface enabled.
 694:	82 e0       	ldi	r24, 0x02	; 2
 696:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 6a0:	84 e0       	ldi	r24, 0x04	; 4
 6a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 6a6:	08 95       	ret

000006a8 <TWI_Start_Transceiver_With_Data>:
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	ec 01       	movw	r28, r24
 6ae:	ec eb       	ldi	r30, 0xBC	; 188
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	90 81       	ld	r25, Z
 6b4:	90 fd       	sbrc	r25, 0
 6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <TWI_Start_Transceiver_With_Data+0xa>
 6b8:	60 93 6b 01 	sts	0x016B, r22	; 0x80016b <TWI_msgSize>
 6bc:	88 81       	ld	r24, Y
 6be:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <TWI_buf>
 6c2:	80 fd       	sbrc	r24, 0
 6c4:	13 c0       	rjmp	.+38     	; 0x6ec <TWI_Start_Transceiver_With_Data+0x44>
 6c6:	62 30       	cpi	r22, 0x02	; 2
 6c8:	88 f0       	brcs	.+34     	; 0x6ec <TWI_Start_Transceiver_With_Data+0x44>
 6ca:	fe 01       	movw	r30, r28
 6cc:	31 96       	adiw	r30, 0x01	; 1
 6ce:	ad e6       	ldi	r26, 0x6D	; 109
 6d0:	b1 e0       	ldi	r27, 0x01	; 1
 6d2:	62 50       	subi	r22, 0x02	; 2
 6d4:	26 2f       	mov	r18, r22
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	2e 5f       	subi	r18, 0xFE	; 254
 6da:	3f 4f       	sbci	r19, 0xFF	; 255
 6dc:	ce 01       	movw	r24, r28
 6de:	82 0f       	add	r24, r18
 6e0:	93 1f       	adc	r25, r19
 6e2:	21 91       	ld	r18, Z+
 6e4:	2d 93       	st	X+, r18
 6e6:	e8 17       	cp	r30, r24
 6e8:	f9 07       	cpc	r31, r25
 6ea:	d9 f7       	brne	.-10     	; 0x6e2 <TWI_Start_Transceiver_With_Data+0x3a>
 6ec:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <TWI_statusReg>
 6f0:	88 ef       	ldi	r24, 0xF8	; 248
 6f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 6f6:	85 ea       	ldi	r24, 0xA5	; 165
 6f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <TWI_Get_Data_From_Transceiver>:
requested (including the address field) in the function call. The function will hold execution (loop)
until the TWI_ISR has completed with the previous operation, before reading out the data and returning.
If there was an error in the previous transmission the function will return the TWI error code.
****************************************************************************/
unsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )
{
 702:	ac 01       	movw	r20, r24
/****************************************************************************
Call this function to test if the TWI_ISR is busy transmitting.
****************************************************************************/
unsigned char TWI_Transceiver_Busy( void )
{
  return ( TWCR & (1<<TWIE) );                  // IF TWI Interrupt is enabled then the Transceiver is busy
 704:	ec eb       	ldi	r30, 0xBC	; 188
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	90 81       	ld	r25, Z
****************************************************************************/
unsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )
{
  unsigned char i;

  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.
 70a:	90 fd       	sbrc	r25, 0
 70c:	fd cf       	rjmp	.-6      	; 0x708 <TWI_Get_Data_From_Transceiver+0x6>

  if( TWI_statusReg.lastTransOK )               // Last transmission competed successfully.              
 70e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <TWI_statusReg>
 712:	80 ff       	sbrs	r24, 0
 714:	12 c0       	rjmp	.+36     	; 0x73a <TWI_Get_Data_From_Transceiver+0x38>
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
 716:	66 23       	and	r22, r22
 718:	81 f0       	breq	.+32     	; 0x73a <TWI_Get_Data_From_Transceiver+0x38>
 71a:	ac e6       	ldi	r26, 0x6C	; 108
 71c:	b1 e0       	ldi	r27, 0x01	; 1
 71e:	fa 01       	movw	r30, r20
 720:	61 50       	subi	r22, 0x01	; 1
 722:	26 2f       	mov	r18, r22
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	2f 5f       	subi	r18, 0xFF	; 255
 728:	3f 4f       	sbci	r19, 0xFF	; 255
 72a:	ca 01       	movw	r24, r20
 72c:	82 0f       	add	r24, r18
 72e:	93 1f       	adc	r25, r19
    {
      msg[ i ] = TWI_buf[ i ];
 730:	2d 91       	ld	r18, X+
 732:	21 93       	st	Z+, r18

  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.

  if( TWI_statusReg.lastTransOK )               // Last transmission competed successfully.              
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
 734:	e8 17       	cp	r30, r24
 736:	f9 07       	cpc	r31, r25
 738:	d9 f7       	brne	.-10     	; 0x730 <TWI_Get_Data_From_Transceiver+0x2e>
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
 73a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <TWI_statusReg>
}
 73e:	81 70       	andi	r24, 0x01	; 1
 740:	08 95       	ret

00000742 <__vector_24>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 742:	1f 92       	push	r1
 744:	0f 92       	push	r0
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	0f 92       	push	r0
 74a:	11 24       	eor	r1, r1
 74c:	2f 93       	push	r18
 74e:	3f 93       	push	r19
 750:	8f 93       	push	r24
 752:	9f 93       	push	r25
 754:	af 93       	push	r26
 756:	bf 93       	push	r27
 758:	ef 93       	push	r30
 75a:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 75c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 760:	8e 2f       	mov	r24, r30
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	fc 01       	movw	r30, r24
 766:	38 97       	sbiw	r30, 0x08	; 8
 768:	e1 35       	cpi	r30, 0x51	; 81
 76a:	f1 05       	cpc	r31, r1
 76c:	08 f0       	brcs	.+2      	; 0x770 <__vector_24+0x2e>
 76e:	56 c0       	rjmp	.+172    	; 0x81c <__vector_24+0xda>
 770:	ec 5c       	subi	r30, 0xCC	; 204
 772:	ff 4f       	sbci	r31, 0xFF	; 255
 774:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 778:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <TWI_bufPtr.1672>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 77c:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <TWI_bufPtr.1672>
 780:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <TWI_msgSize>
 784:	e8 17       	cp	r30, r24
 786:	70 f4       	brcc	.+28     	; 0x7a4 <__vector_24+0x62>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	8e 0f       	add	r24, r30
 78c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <TWI_bufPtr.1672>
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	e4 59       	subi	r30, 0x94	; 148
 794:	fe 4f       	sbci	r31, 0xFE	; 254
 796:	80 81       	ld	r24, Z
 798:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 79c:	85 e8       	ldi	r24, 0x85	; 133
 79e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 7a2:	43 c0       	rjmp	.+134    	; 0x82a <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 7a4:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <TWI_statusReg>
 7a8:	81 60       	ori	r24, 0x01	; 1
 7aa:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 7ae:	84 e9       	ldi	r24, 0x94	; 148
 7b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 7b4:	3a c0       	rjmp	.+116    	; 0x82a <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 7b6:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <TWI_bufPtr.1672>
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	8e 0f       	add	r24, r30
 7be:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <TWI_bufPtr.1672>
 7c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	e4 59       	subi	r30, 0x94	; 148
 7ca:	fe 4f       	sbci	r31, 0xFE	; 254
 7cc:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 7ce:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <TWI_bufPtr.1672>
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <TWI_msgSize>
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	01 97       	sbiw	r24, 0x01	; 1
 7dc:	28 17       	cp	r18, r24
 7de:	39 07       	cpc	r19, r25
 7e0:	24 f4       	brge	.+8      	; 0x7ea <__vector_24+0xa8>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 7e2:	85 ec       	ldi	r24, 0xC5	; 197
 7e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 7e8:	20 c0       	rjmp	.+64     	; 0x82a <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 7ea:	85 e8       	ldi	r24, 0x85	; 133
 7ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 7f0:	1c c0       	rjmp	.+56     	; 0x82a <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 7f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 7f6:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <TWI_bufPtr.1672>
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	e4 59       	subi	r30, 0x94	; 148
 7fe:	fe 4f       	sbci	r31, 0xFE	; 254
 800:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 802:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <TWI_statusReg>
 806:	81 60       	ori	r24, 0x01	; 1
 808:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 80c:	84 e9       	ldi	r24, 0x94	; 148
 80e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 812:	0b c0       	rjmp	.+22     	; 0x82a <__vector_24+0xe8>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 814:	85 ea       	ldi	r24, 0xA5	; 165
 816:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 81a:	07 c0       	rjmp	.+14     	; 0x82a <__vector_24+0xe8>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 81c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 820:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 824:	84 e0       	ldi	r24, 0x04	; 4
 826:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 82a:	ff 91       	pop	r31
 82c:	ef 91       	pop	r30
 82e:	bf 91       	pop	r27
 830:	af 91       	pop	r26
 832:	9f 91       	pop	r25
 834:	8f 91       	pop	r24
 836:	3f 91       	pop	r19
 838:	2f 91       	pop	r18
 83a:	0f 90       	pop	r0
 83c:	0f be       	out	0x3f, r0	; 63
 83e:	0f 90       	pop	r0
 840:	1f 90       	pop	r1
 842:	18 95       	reti

00000844 <UART_initialise>:
			return 1;
		}
		return 0;
	}
	return 0;	
}
 844:	80 ec       	ldi	r24, 0xC0	; 192
 846:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 84a:	86 e0       	ldi	r24, 0x06	; 6
 84c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 850:	8c e0       	ldi	r24, 0x0C	; 12
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 858:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 85c:	08 95       	ret

0000085e <UART_tx>:
 85e:	9c 01       	movw	r18, r24
 860:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <state>
 864:	91 11       	cpse	r25, r1
 866:	3f c0       	rjmp	.+126    	; 0x8e6 <UART_tx+0x88>
 868:	41 15       	cp	r20, r1
 86a:	51 05       	cpc	r21, r1
 86c:	61 05       	cpc	r22, r1
 86e:	71 05       	cpc	r23, r1
 870:	09 f4       	brne	.+2      	; 0x874 <UART_tx+0x16>
 872:	3b c0       	rjmp	.+118    	; 0x8ea <UART_tx+0x8c>
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <state>
 87a:	40 93 81 01 	sts	0x0181, r20	; 0x800181 <tx_length>
 87e:	50 93 82 01 	sts	0x0182, r21	; 0x800182 <tx_length+0x1>
 882:	60 93 83 01 	sts	0x0183, r22	; 0x800183 <tx_length+0x2>
 886:	70 93 84 01 	sts	0x0184, r23	; 0x800184 <tx_length+0x3>
 88a:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <tx_cnt>
 88e:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <tx_cnt+0x1>
 892:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <tx_cnt+0x2>
 896:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <tx_cnt+0x3>
 89a:	30 93 80 01 	sts	0x0180, r19	; 0x800180 <tx_buffer+0x1>
 89e:	20 93 7f 01 	sts	0x017F, r18	; 0x80017f <tx_buffer>
 8a2:	e1 ec       	ldi	r30, 0xC1	; 193
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	88 60       	ori	r24, 0x08	; 8
 8aa:	80 83       	st	Z, r24
 8ac:	a0 91 7f 01 	lds	r26, 0x017F	; 0x80017f <tx_buffer>
 8b0:	b0 91 80 01 	lds	r27, 0x0180	; 0x800180 <tx_buffer+0x1>
 8b4:	8c 91       	ld	r24, X
 8b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 8ba:	80 81       	ld	r24, Z
 8bc:	80 62       	ori	r24, 0x20	; 32
 8be:	80 83       	st	Z, r24
 8c0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <state>
 8c4:	81 30       	cpi	r24, 0x01	; 1
 8c6:	99 f4       	brne	.+38     	; 0x8ee <UART_tx+0x90>
 8c8:	f8 94       	cli
 8ca:	83 b7       	in	r24, 0x33	; 51
 8cc:	81 60       	ori	r24, 0x01	; 1
 8ce:	83 bf       	out	0x33, r24	; 51
 8d0:	78 94       	sei
 8d2:	88 95       	sleep
 8d4:	83 b7       	in	r24, 0x33	; 51
 8d6:	8e 7f       	andi	r24, 0xFE	; 254
 8d8:	83 bf       	out	0x33, r24	; 51
 8da:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <state>
 8de:	81 30       	cpi	r24, 0x01	; 1
 8e0:	99 f3       	breq	.-26     	; 0x8c8 <UART_tx+0x6a>
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	08 95       	ret
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	08 95       	ret
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	08 95       	ret
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	08 95       	ret

000008f2 <__vector_18>:

ISR(USART_RX_vect){
 8f2:	1f 92       	push	r1
 8f4:	0f 92       	push	r0
 8f6:	0f b6       	in	r0, 0x3f	; 63
 8f8:	0f 92       	push	r0
 8fa:	11 24       	eor	r1, r1
 8fc:	2f 93       	push	r18
 8fe:	3f 93       	push	r19
 900:	4f 93       	push	r20
 902:	5f 93       	push	r21
 904:	6f 93       	push	r22
 906:	7f 93       	push	r23
 908:	8f 93       	push	r24
 90a:	9f 93       	push	r25
 90c:	af 93       	push	r26
 90e:	bf 93       	push	r27
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
 914:	ef 93       	push	r30
 916:	ff 93       	push	r31
	rx_buffer[rx_cnt] = UDR0;
 918:	c0 91 7d 01 	lds	r28, 0x017D	; 0x80017d <rx_buffer>
 91c:	d0 91 7e 01 	lds	r29, 0x017E	; 0x80017e <rx_buffer+0x1>
 920:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rx_cnt>
 924:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <rx_cnt+0x1>
 928:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <rx_cnt+0x2>
 92c:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <rx_cnt+0x3>
 930:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 934:	fe 01       	movw	r30, r28
 936:	e8 0f       	add	r30, r24
 938:	f9 1f       	adc	r31, r25
 93a:	20 83       	st	Z, r18
	if(rx_cnt > 0)
 93c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rx_cnt>
 940:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <rx_cnt+0x1>
 944:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <rx_cnt+0x2>
 948:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <rx_cnt+0x3>
 94c:	89 2b       	or	r24, r25
 94e:	8a 2b       	or	r24, r26
 950:	8b 2b       	or	r24, r27
 952:	61 f1       	breq	.+88     	; 0x9ac <__stack+0xad>
		if(memcmp(&rx_buffer[rx_cnt-1], rx_terminator, 2)){
 954:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rx_cnt>
 958:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <rx_cnt+0x1>
 95c:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <rx_cnt+0x2>
 960:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <rx_cnt+0x3>
 964:	01 97       	sbiw	r24, 0x01	; 1
 966:	42 e0       	ldi	r20, 0x02	; 2
 968:	50 e0       	ldi	r21, 0x00	; 0
 96a:	63 e6       	ldi	r22, 0x63	; 99
 96c:	71 e0       	ldi	r23, 0x01	; 1
 96e:	8c 0f       	add	r24, r28
 970:	9d 1f       	adc	r25, r29
 972:	0e 94 81 05 	call	0xb02	; 0xb02 <memcmp>
 976:	89 2b       	or	r24, r25
 978:	c9 f0       	breq	.+50     	; 0x9ac <__stack+0xad>
			// In this case, we just append \0 and disable the UART reception, then set correct state
			rx_buffer[rx_cnt + 1] = '\0';
 97a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rx_cnt>
 97e:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <rx_cnt+0x1>
 982:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <rx_cnt+0x2>
 986:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <rx_cnt+0x3>
 98a:	c8 0f       	add	r28, r24
 98c:	d9 1f       	adc	r29, r25
 98e:	19 82       	std	Y+1, r1	; 0x01
			if(state == tx_rx)
 990:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <state>
 994:	83 30       	cpi	r24, 0x03	; 3
 996:	21 f4       	brne	.+8      	; 0x9a0 <__stack+0xa1>
				state = tx;
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <state>
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <__stack+0xa5>
			else
				state = waiting;
 9a0:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <state>
			UART_rx_disable();
 9a4:	e1 ec       	ldi	r30, 0xC1	; 193
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	80 81       	ld	r24, Z
 9aa:	10 82       	st	Z, r1
		}
	++rx_cnt;
 9ac:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rx_cnt>
 9b0:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <rx_cnt+0x1>
 9b4:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <rx_cnt+0x2>
 9b8:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <rx_cnt+0x3>
 9bc:	01 96       	adiw	r24, 0x01	; 1
 9be:	a1 1d       	adc	r26, r1
 9c0:	b1 1d       	adc	r27, r1
 9c2:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <rx_cnt>
 9c6:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <rx_cnt+0x1>
 9ca:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <rx_cnt+0x2>
 9ce:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <rx_cnt+0x3>
}
 9d2:	ff 91       	pop	r31
 9d4:	ef 91       	pop	r30
 9d6:	df 91       	pop	r29
 9d8:	cf 91       	pop	r28
 9da:	bf 91       	pop	r27
 9dc:	af 91       	pop	r26
 9de:	9f 91       	pop	r25
 9e0:	8f 91       	pop	r24
 9e2:	7f 91       	pop	r23
 9e4:	6f 91       	pop	r22
 9e6:	5f 91       	pop	r21
 9e8:	4f 91       	pop	r20
 9ea:	3f 91       	pop	r19
 9ec:	2f 91       	pop	r18
 9ee:	0f 90       	pop	r0
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	0f 90       	pop	r0
 9f4:	1f 90       	pop	r1
 9f6:	18 95       	reti

000009f8 <__vector_19>:

ISR(USART_UDRE_vect){
 9f8:	1f 92       	push	r1
 9fa:	0f 92       	push	r0
 9fc:	0f b6       	in	r0, 0x3f	; 63
 9fe:	0f 92       	push	r0
 a00:	11 24       	eor	r1, r1
 a02:	2f 93       	push	r18
 a04:	3f 93       	push	r19
 a06:	4f 93       	push	r20
 a08:	5f 93       	push	r21
 a0a:	6f 93       	push	r22
 a0c:	7f 93       	push	r23
 a0e:	8f 93       	push	r24
 a10:	9f 93       	push	r25
 a12:	af 93       	push	r26
 a14:	bf 93       	push	r27
 a16:	ef 93       	push	r30
 a18:	ff 93       	push	r31
	++tx_cnt;// increment txCnt (since the byte has been loaded in transmitter
 a1a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <tx_cnt>
 a1e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <tx_cnt+0x1>
 a22:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <tx_cnt+0x2>
 a26:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <tx_cnt+0x3>
 a2a:	01 96       	adiw	r24, 0x01	; 1
 a2c:	a1 1d       	adc	r26, r1
 a2e:	b1 1d       	adc	r27, r1
 a30:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <tx_cnt>
 a34:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <tx_cnt+0x1>
 a38:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <tx_cnt+0x2>
 a3c:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <tx_cnt+0x3>
	if(tx_cnt < tx_length){
 a40:	40 91 78 01 	lds	r20, 0x0178	; 0x800178 <tx_cnt>
 a44:	50 91 79 01 	lds	r21, 0x0179	; 0x800179 <tx_cnt+0x1>
 a48:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <tx_cnt+0x2>
 a4c:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <tx_cnt+0x3>
 a50:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <tx_length>
 a54:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <tx_length+0x1>
 a58:	a0 91 83 01 	lds	r26, 0x0183	; 0x800183 <tx_length+0x2>
 a5c:	b0 91 84 01 	lds	r27, 0x0184	; 0x800184 <tx_length+0x3>
 a60:	48 17       	cp	r20, r24
 a62:	59 07       	cpc	r21, r25
 a64:	6a 07       	cpc	r22, r26
 a66:	7b 07       	cpc	r23, r27
 a68:	98 f4       	brcc	.+38     	; 0xa90 <__vector_19+0x98>
		UDR0 = tx_buffer[tx_cnt];
 a6a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <tx_cnt>
 a6e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <tx_cnt+0x1>
 a72:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <tx_cnt+0x2>
 a76:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <tx_cnt+0x3>
 a7a:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <tx_buffer>
 a7e:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <tx_buffer+0x1>
 a82:	f9 01       	movw	r30, r18
 a84:	e8 0f       	add	r30, r24
 a86:	f9 1f       	adc	r31, r25
 a88:	80 81       	ld	r24, Z
 a8a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__vector_19+0xa0>
		//this clears the interrupt flag automatically.
	}
	else{
		//disable UDRE interrupt
		UCSR0B &= !(1<<UDRIE0);
 a90:	e1 ec       	ldi	r30, 0xC1	; 193
 a92:	f0 e0       	ldi	r31, 0x00	; 0
 a94:	80 81       	ld	r24, Z
 a96:	10 82       	st	Z, r1
		//once last byte has left, TX_vect should trigger, updating the transmit state
	}
}
 a98:	ff 91       	pop	r31
 a9a:	ef 91       	pop	r30
 a9c:	bf 91       	pop	r27
 a9e:	af 91       	pop	r26
 aa0:	9f 91       	pop	r25
 aa2:	8f 91       	pop	r24
 aa4:	7f 91       	pop	r23
 aa6:	6f 91       	pop	r22
 aa8:	5f 91       	pop	r21
 aaa:	4f 91       	pop	r20
 aac:	3f 91       	pop	r19
 aae:	2f 91       	pop	r18
 ab0:	0f 90       	pop	r0
 ab2:	0f be       	out	0x3f, r0	; 63
 ab4:	0f 90       	pop	r0
 ab6:	1f 90       	pop	r1
 ab8:	18 95       	reti

00000aba <__vector_20>:

ISR(USART_TX_vect){
 aba:	1f 92       	push	r1
 abc:	0f 92       	push	r0
 abe:	0f b6       	in	r0, 0x3f	; 63
 ac0:	0f 92       	push	r0
 ac2:	11 24       	eor	r1, r1
 ac4:	8f 93       	push	r24
 ac6:	ef 93       	push	r30
 ac8:	ff 93       	push	r31
	// set state to only rx of coming from tx_rx
	// alternatively, when coming from tx, go back to waiting.
	if(state == tx_rx)
 aca:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <state>
 ace:	83 30       	cpi	r24, 0x03	; 3
 ad0:	21 f4       	brne	.+8      	; 0xada <__vector_20+0x20>
		state = rx;
 ad2:	82 e0       	ldi	r24, 0x02	; 2
 ad4:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <state>
 ad8:	02 c0       	rjmp	.+4      	; 0xade <__vector_20+0x24>
	else
		state = waiting;
 ada:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <state>
	UART_tx_disable();
 ade:	e1 ec       	ldi	r30, 0xC1	; 193
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	80 81       	ld	r24, Z
 ae4:	10 82       	st	Z, r1
}
 ae6:	ff 91       	pop	r31
 ae8:	ef 91       	pop	r30
 aea:	8f 91       	pop	r24
 aec:	0f 90       	pop	r0
 aee:	0f be       	out	0x3f, r0	; 63
 af0:	0f 90       	pop	r0
 af2:	1f 90       	pop	r1
 af4:	18 95       	reti

00000af6 <__tablejump2__>:
 af6:	ee 0f       	add	r30, r30
 af8:	ff 1f       	adc	r31, r31
 afa:	05 90       	lpm	r0, Z+
 afc:	f4 91       	lpm	r31, Z
 afe:	e0 2d       	mov	r30, r0
 b00:	09 94       	ijmp

00000b02 <memcmp>:
 b02:	fb 01       	movw	r30, r22
 b04:	dc 01       	movw	r26, r24
 b06:	04 c0       	rjmp	.+8      	; 0xb10 <memcmp+0xe>
 b08:	8d 91       	ld	r24, X+
 b0a:	01 90       	ld	r0, Z+
 b0c:	80 19       	sub	r24, r0
 b0e:	21 f4       	brne	.+8      	; 0xb18 <memcmp+0x16>
 b10:	41 50       	subi	r20, 0x01	; 1
 b12:	50 40       	sbci	r21, 0x00	; 0
 b14:	c8 f7       	brcc	.-14     	; 0xb08 <memcmp+0x6>
 b16:	88 1b       	sub	r24, r24
 b18:	99 0b       	sbc	r25, r25
 b1a:	08 95       	ret

00000b1c <_exit>:
 b1c:	f8 94       	cli

00000b1e <__stop_program>:
 b1e:	ff cf       	rjmp	.-2      	; 0xb1e <__stop_program>
