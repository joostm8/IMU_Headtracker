
IMU_Headtracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000025c  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  000002f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091f  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b2  00000000  00000000  00000cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000427  00000000  00000000  000014a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  000018cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a0  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019b  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001fe3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_24>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	c0 00       	.word	0x00c0	; ????
  6a:	12 01       	movw	r2, r4
  6c:	12 01       	movw	r2, r4
  6e:	12 01       	movw	r2, r4
  70:	12 01       	movw	r2, r4
  72:	12 01       	movw	r2, r4
  74:	12 01       	movw	r2, r4
  76:	12 01       	movw	r2, r4
  78:	c0 00       	.word	0x00c0	; ????
  7a:	12 01       	movw	r2, r4
  7c:	12 01       	movw	r2, r4
  7e:	12 01       	movw	r2, r4
  80:	12 01       	movw	r2, r4
  82:	12 01       	movw	r2, r4
  84:	12 01       	movw	r2, r4
  86:	12 01       	movw	r2, r4
  88:	c2 00       	.word	0x00c2	; ????
  8a:	12 01       	movw	r2, r4
  8c:	12 01       	movw	r2, r4
  8e:	12 01       	movw	r2, r4
  90:	12 01       	movw	r2, r4
  92:	12 01       	movw	r2, r4
  94:	12 01       	movw	r2, r4
  96:	12 01       	movw	r2, r4
  98:	12 01       	movw	r2, r4
  9a:	12 01       	movw	r2, r4
  9c:	12 01       	movw	r2, r4
  9e:	12 01       	movw	r2, r4
  a0:	12 01       	movw	r2, r4
  a2:	12 01       	movw	r2, r4
  a4:	12 01       	movw	r2, r4
  a6:	12 01       	movw	r2, r4
  a8:	c2 00       	.word	0x00c2	; ????
  aa:	12 01       	movw	r2, r4
  ac:	12 01       	movw	r2, r4
  ae:	12 01       	movw	r2, r4
  b0:	12 01       	movw	r2, r4
  b2:	12 01       	movw	r2, r4
  b4:	12 01       	movw	r2, r4
  b6:	12 01       	movw	r2, r4
  b8:	12 01       	movw	r2, r4
  ba:	12 01       	movw	r2, r4
  bc:	12 01       	movw	r2, r4
  be:	12 01       	movw	r2, r4
  c0:	12 01       	movw	r2, r4
  c2:	12 01       	movw	r2, r4
  c4:	12 01       	movw	r2, r4
  c6:	12 01       	movw	r2, r4
  c8:	0e 01       	movw	r0, r28
  ca:	12 01       	movw	r2, r4
  cc:	12 01       	movw	r2, r4
  ce:	12 01       	movw	r2, r4
  d0:	12 01       	movw	r2, r4
  d2:	12 01       	movw	r2, r4
  d4:	12 01       	movw	r2, r4
  d6:	12 01       	movw	r2, r4
  d8:	eb 00       	.word	0x00eb	; ????
  da:	12 01       	movw	r2, r4
  dc:	12 01       	movw	r2, r4
  de:	12 01       	movw	r2, r4
  e0:	12 01       	movw	r2, r4
  e2:	12 01       	movw	r2, r4
  e4:	12 01       	movw	r2, r4
  e6:	12 01       	movw	r2, r4
  e8:	12 01       	movw	r2, r4
  ea:	12 01       	movw	r2, r4
  ec:	12 01       	movw	r2, r4
  ee:	12 01       	movw	r2, r4
  f0:	12 01       	movw	r2, r4
  f2:	12 01       	movw	r2, r4
  f4:	12 01       	movw	r2, r4
  f6:	12 01       	movw	r2, r4
  f8:	df 00       	.word	0x00df	; ????
  fa:	12 01       	movw	r2, r4
  fc:	12 01       	movw	r2, r4
  fe:	12 01       	movw	r2, r4
 100:	12 01       	movw	r2, r4
 102:	12 01       	movw	r2, r4
 104:	12 01       	movw	r2, r4
 106:	12 01       	movw	r2, r4
 108:	fd 00       	.word	0x00fd	; ????

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d8 e0       	ldi	r29, 0x08	; 8
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	ec e5       	ldi	r30, 0x5C	; 92
 11e:	f2 e0       	ldi	r31, 0x02	; 2
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	a2 30       	cpi	r26, 0x02	; 2
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	a2 e0       	ldi	r26, 0x02	; 2
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	a9 30       	cpi	r26, 0x09	; 9
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	0e 94 a4 00 	call	0x148	; 0x148 <main>
 140:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <main>:
	calibration,
	operation
	} state = startup;

int main(void)
{
 148:	ff cf       	rjmp	.-2      	; 0x148 <main>

0000014a <__vector_24>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	af 93       	push	r26
 15e:	bf 93       	push	r27
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 164:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 168:	8e 2f       	mov	r24, r30
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	38 97       	sbiw	r30, 0x08	; 8
 170:	e1 35       	cpi	r30, 0x51	; 81
 172:	f1 05       	cpc	r31, r1
 174:	08 f0       	brcs	.+2      	; 0x178 <__vector_24+0x2e>
 176:	56 c0       	rjmp	.+172    	; 0x224 <__vector_24+0xda>
 178:	ec 5c       	subi	r30, 0xCC	; 204
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 180:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 184:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 188:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_msgSize>
 18c:	e8 17       	cp	r30, r24
 18e:	70 f4       	brcc	.+28     	; 0x1ac <__vector_24+0x62>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	8e 0f       	add	r24, r30
 194:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	eb 5f       	subi	r30, 0xFB	; 251
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	80 81       	ld	r24, Z
 1a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1a4:	85 e8       	ldi	r24, 0x85	; 133
 1a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1aa:	43 c0       	rjmp	.+134    	; 0x232 <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 1ac:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1b6:	84 e9       	ldi	r24, 0x94	; 148
 1b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1bc:	3a c0       	rjmp	.+116    	; 0x232 <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 1be:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	8e 0f       	add	r24, r30
 1c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	eb 5f       	subi	r30, 0xFB	; 251
 1d2:	fe 4f       	sbci	r31, 0xFE	; 254
 1d4:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 1d6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TWI_msgSize>
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	28 17       	cp	r18, r24
 1e6:	39 07       	cpc	r19, r25
 1e8:	24 f4       	brge	.+8      	; 0x1f2 <__vector_24+0xa8>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1ea:	85 ec       	ldi	r24, 0xC5	; 197
 1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1f0:	20 c0       	rjmp	.+64     	; 0x232 <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 1f2:	85 e8       	ldi	r24, 0x85	; 133
 1f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1f8:	1c c0       	rjmp	.+56     	; 0x232 <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 1fa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1fe:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	eb 5f       	subi	r30, 0xFB	; 251
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 20a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TWI_statusReg>
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 214:	84 e9       	ldi	r24, 0x94	; 148
 216:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 21a:	0b c0       	rjmp	.+22     	; 0x232 <__vector_24+0xe8>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 21c:	85 ea       	ldi	r24, 0xA5	; 165
 21e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 222:	07 c0       	rjmp	.+14     	; 0x232 <__vector_24+0xe8>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 224:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 228:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <__tablejump2__>:
 24c:	ee 0f       	add	r30, r30
 24e:	ff 1f       	adc	r31, r31
 250:	05 90       	lpm	r0, Z+
 252:	f4 91       	lpm	r31, Z
 254:	e0 2d       	mov	r30, r0
 256:	09 94       	ijmp

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
