
IMU_Headtracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000342  000003d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800102  00800102  000003d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000873  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000740  00000000  00000000  00000d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ee  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  0000183c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019b  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ef3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_18>
  4c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_19>
  50:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_20>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_24>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	33 01       	movw	r6, r6
  6a:	85 01       	movw	r16, r10
  6c:	85 01       	movw	r16, r10
  6e:	85 01       	movw	r16, r10
  70:	85 01       	movw	r16, r10
  72:	85 01       	movw	r16, r10
  74:	85 01       	movw	r16, r10
  76:	85 01       	movw	r16, r10
  78:	33 01       	movw	r6, r6
  7a:	85 01       	movw	r16, r10
  7c:	85 01       	movw	r16, r10
  7e:	85 01       	movw	r16, r10
  80:	85 01       	movw	r16, r10
  82:	85 01       	movw	r16, r10
  84:	85 01       	movw	r16, r10
  86:	85 01       	movw	r16, r10
  88:	35 01       	movw	r6, r10
  8a:	85 01       	movw	r16, r10
  8c:	85 01       	movw	r16, r10
  8e:	85 01       	movw	r16, r10
  90:	85 01       	movw	r16, r10
  92:	85 01       	movw	r16, r10
  94:	85 01       	movw	r16, r10
  96:	85 01       	movw	r16, r10
  98:	85 01       	movw	r16, r10
  9a:	85 01       	movw	r16, r10
  9c:	85 01       	movw	r16, r10
  9e:	85 01       	movw	r16, r10
  a0:	85 01       	movw	r16, r10
  a2:	85 01       	movw	r16, r10
  a4:	85 01       	movw	r16, r10
  a6:	85 01       	movw	r16, r10
  a8:	35 01       	movw	r6, r10
  aa:	85 01       	movw	r16, r10
  ac:	85 01       	movw	r16, r10
  ae:	85 01       	movw	r16, r10
  b0:	85 01       	movw	r16, r10
  b2:	85 01       	movw	r16, r10
  b4:	85 01       	movw	r16, r10
  b6:	85 01       	movw	r16, r10
  b8:	85 01       	movw	r16, r10
  ba:	85 01       	movw	r16, r10
  bc:	85 01       	movw	r16, r10
  be:	85 01       	movw	r16, r10
  c0:	85 01       	movw	r16, r10
  c2:	85 01       	movw	r16, r10
  c4:	85 01       	movw	r16, r10
  c6:	85 01       	movw	r16, r10
  c8:	81 01       	movw	r16, r2
  ca:	85 01       	movw	r16, r10
  cc:	85 01       	movw	r16, r10
  ce:	85 01       	movw	r16, r10
  d0:	85 01       	movw	r16, r10
  d2:	85 01       	movw	r16, r10
  d4:	85 01       	movw	r16, r10
  d6:	85 01       	movw	r16, r10
  d8:	5e 01       	movw	r10, r28
  da:	85 01       	movw	r16, r10
  dc:	85 01       	movw	r16, r10
  de:	85 01       	movw	r16, r10
  e0:	85 01       	movw	r16, r10
  e2:	85 01       	movw	r16, r10
  e4:	85 01       	movw	r16, r10
  e6:	85 01       	movw	r16, r10
  e8:	85 01       	movw	r16, r10
  ea:	85 01       	movw	r16, r10
  ec:	85 01       	movw	r16, r10
  ee:	85 01       	movw	r16, r10
  f0:	85 01       	movw	r16, r10
  f2:	85 01       	movw	r16, r10
  f4:	85 01       	movw	r16, r10
  f6:	85 01       	movw	r16, r10
  f8:	52 01       	movw	r10, r4
  fa:	85 01       	movw	r16, r10
  fc:	85 01       	movw	r16, r10
  fe:	85 01       	movw	r16, r10
 100:	85 01       	movw	r16, r10
 102:	85 01       	movw	r16, r10
 104:	85 01       	movw	r16, r10
 106:	85 01       	movw	r16, r10
 108:	70 01       	movw	r14, r0

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d8 e0       	ldi	r29, 0x08	; 8
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	e2 e4       	ldi	r30, 0x42	; 66
 11e:	f3 e0       	ldi	r31, 0x03	; 3
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	a2 30       	cpi	r26, 0x02	; 2
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	a2 e0       	ldi	r26, 0x02	; 2
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	af 30       	cpi	r26, 0x0F	; 15
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
 13c:	0e 94 a4 00 	call	0x148	; 0x148 <main>
 140:	0c 94 9f 01 	jmp	0x33e	; 0x33e <_exit>

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <main>:
 148:	0e 94 0e 01 	call	0x21c	; 0x21c <TWI_Master_Initialise>
 14c:	e1 ec       	ldi	r30, 0xC1	; 193
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 ec       	ldi	r24, 0xC0	; 192
 152:	80 83       	st	Z, r24
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 162:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 166:	80 81       	ld	r24, Z
 168:	88 61       	ori	r24, 0x18	; 24
 16a:	80 83       	st	Z, r24
 16c:	78 94       	sei
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	84 e3       	ldi	r24, 0x34	; 52
 172:	9c e0       	ldi	r25, 0x0C	; 12
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x2c>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x36>
 17e:	00 00       	nop
 180:	ff cf       	rjmp	.-2      	; 0x180 <main+0x38>

00000182 <__vector_18>:
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_19>:
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
 1ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1b0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1b4:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 1b8:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	a1 1d       	adc	r26, r1
 1c0:	b1 1d       	adc	r27, r1
 1c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1c6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1ca:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 1ce:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
 1d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1d6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1da:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
 1de:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
 1e2:	e1 ec       	ldi	r30, 0xC1	; 193
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	10 82       	st	Z, r1
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_20>:
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_ZL7txState+0x1>
 20e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_ZL7txState>
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <TWI_Master_Initialise>:
    {
      msg[ i ] = TWI_buf[ i ];
    }
  }
  return( TWI_statusReg.lastTransOK );                                   
}
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 228:	84 e0       	ldi	r24, 0x04	; 4
 22a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 22e:	08 95       	ret

00000230 <__vector_24>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 24a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 24e:	8e 2f       	mov	r24, r30
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	fc 01       	movw	r30, r24
 254:	38 97       	sbiw	r30, 0x08	; 8
 256:	e1 35       	cpi	r30, 0x51	; 81
 258:	f1 05       	cpc	r31, r1
 25a:	08 f0       	brcs	.+2      	; 0x25e <__vector_24+0x2e>
 25c:	56 c0       	rjmp	.+172    	; 0x30a <__vector_24+0xda>
 25e:	ec 5c       	subi	r30, 0xCC	; 204
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	0c 94 99 01 	jmp	0x332	; 0x332 <__tablejump2__>
  {
    case TWI_START:             // START has been transmitted  
    case TWI_REP_START:         // Repeated START has been transmitted
      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 266:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TWI_bufPtr.1672>
    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received
    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received
      if (TWI_bufPtr < TWI_msgSize)
 26a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <TWI_bufPtr.1672>
 26e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TWI_msgSize>
 272:	e8 17       	cp	r30, r24
 274:	70 f4       	brcc	.+28     	; 0x292 <__vector_24+0x62>
      {
        TWDR = TWI_buf[TWI_bufPtr++];
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	8e 0f       	add	r24, r30
 27a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TWI_bufPtr.1672>
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	e5 5f       	subi	r30, 0xF5	; 245
 282:	fe 4f       	sbci	r31, 0xFE	; 254
 284:	80 81       	ld	r24, Z
 286:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 28a:	85 e8       	ldi	r24, 0x85	; 133
 28c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 290:	43 c0       	rjmp	.+134    	; 0x318 <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
               (0<<TWWC);                                 //  
      }else                    // Send STOP after last byte
      {
        TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 292:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <TWI_statusReg>
 296:	81 60       	ori	r24, 0x01	; 1
 298:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <TWI_statusReg>
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 29c:	84 e9       	ldi	r24, 0x94	; 148
 29e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2a2:	3a c0       	rjmp	.+116    	; 0x318 <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
               (0<<TWWC);                                 //
      }
      break;
    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted
      TWI_buf[TWI_bufPtr++] = TWDR;
 2a4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <TWI_bufPtr.1672>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	8e 0f       	add	r24, r30
 2ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TWI_bufPtr.1672>
 2b0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	e5 5f       	subi	r30, 0xF5	; 245
 2b8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ba:	80 83       	st	Z, r24
    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received
      if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 2bc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <TWI_bufPtr.1672>
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TWI_msgSize>
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	28 17       	cp	r18, r24
 2cc:	39 07       	cpc	r19, r25
 2ce:	24 f4       	brge	.+8      	; 0x2d8 <__vector_24+0xa8>
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2d0:	85 ec       	ldi	r24, 0xC5	; 197
 2d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2d6:	20 c0       	rjmp	.+64     	; 0x318 <__vector_24+0xe8>
               (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte
               (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
               (0<<TWWC);                                 //  
      }else                    // Send NACK after next reception
      {
        TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2d8:	85 e8       	ldi	r24, 0x85	; 133
 2da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2de:	1c c0       	rjmp	.+56     	; 0x318 <__vector_24+0xe8>
               (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
               (0<<TWWC);                                 // 
      }    
      break; 
    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted
      TWI_buf[TWI_bufPtr] = TWDR;
 2e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2e4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <TWI_bufPtr.1672>
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	e5 5f       	subi	r30, 0xF5	; 245
 2ec:	fe 4f       	sbci	r31, 0xFE	; 254
 2ee:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully. 
 2f0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <TWI_statusReg>
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <TWI_statusReg>
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 2fa:	84 e9       	ldi	r24, 0x94	; 148
 2fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
             (0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
             (0<<TWWC);                                 //
      break;      
 300:	0b c0       	rjmp	.+22     	; 0x318 <__vector_24+0xe8>
    case TWI_ARB_LOST:          // Arbitration lost
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 302:	85 ea       	ldi	r24, 0xA5	; 165
 304:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag
             (0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
             (0<<TWWC);                                 //
      break;
 308:	07 c0       	rjmp	.+14     	; 0x318 <__vector_24+0xe8>
    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received
    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    
    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
    default:     
      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 30a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 30e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                                                        // Reset TWI Interface
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 312:	84 e0       	ldi	r24, 0x04	; 4
 314:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
             (0<<TWIE)|(0<<TWINT)|                      // Disable Interrupt
             (0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
             (0<<TWWC);                                 //
  }
}
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <__tablejump2__>:
 332:	ee 0f       	add	r30, r30
 334:	ff 1f       	adc	r31, r31
 336:	05 90       	lpm	r0, Z+
 338:	f4 91       	lpm	r31, Z
 33a:	e0 2d       	mov	r30, r0
 33c:	09 94       	ijmp

0000033e <_exit>:
 33e:	f8 94       	cli

00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>
